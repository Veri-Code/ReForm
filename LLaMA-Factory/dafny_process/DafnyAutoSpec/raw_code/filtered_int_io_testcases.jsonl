{"cc_complex": 7, "difficulty": "Medium", "task_id": "reverse-integer", "question_id": 7, "tags": ["Math"], "signature": "class Solution:\n    def reverse(self, x: int) -> int:\n        ", "entry_point": "reverse_7", "constraints": "-2**31 <= x <= 2**31 - 1", "IO_type": [["x:int"], ["int"]], "code": "def reverse_7(x: int) -> int:\n    ans = 0\n    (mi, mx) = (-2 ** 31, 2 ** 31 - 1)\n    while x:\n        if ans < mi // 10 + 1 or ans > mx // 10:\n            return 0\n        y = x % 10\n        if x < 0 and y > 0:\n            y -= 10\n        ans = ans * 10 + y\n        x = (x - y) // 10\n    return ans", "IO_sample": [{"input": "x = -2147483412", "output": "-2143847412"}, {"input": "x = 2147483647", "output": "0"}, {"input": "x = 120", "output": "21"}, {"input": "x = -123", "output": "-321"}, {"input": "x = 1534236469", "output": "0"}, {"input": "x = 0", "output": "0"}, {"input": "x = -2147483648", "output": "0"}, {"input": "x = -1534236469", "output": "0"}, {"input": "x = 123", "output": "321"}, {"input": "x = -10", "output": "-1"}, {"input": "x = -100000", "output": "-1"}, {"input": "x = 10", "output": "1"}, {"input": "x = -999999999", "output": "-999999999"}, {"input": "x = 1", "output": "1"}, {"input": "x = 2147483646", "output": "0"}, {"input": "x = -123000", "output": "-321"}, {"input": "x = -900000", "output": "-9"}, {"input": "x = -100100100", "output": "-1001001"}, {"input": "x = -2147483647", "output": "0"}, {"input": "x = -1010101010", "output": "-101010101"}, {"input": "x = 1000000001", "output": "1000000001"}, {"input": "x = -1", "output": "-1"}, {"input": "x = 123000", "output": "321"}, {"input": "x = -2000000002", "output": "-2000000002"}, {"input": "x = 101010101", "output": "101010101"}, {"input": "x = 1111111111", "output": "1111111111"}, {"input": "x = 2147447412", "output": "2147447412"}, {"input": "x = -101010101", "output": "-101010101"}, {"input": "x = 900000", "output": "9"}, {"input": "x = 987654321", "output": "123456789"}, {"input": "x = 999999999", "output": "999999999"}, {"input": "x = -1000000000", "output": "-1"}, {"input": "x = 1001001001", "output": "1001001001"}, {"input": "x = -987654321", "output": "-123456789"}, {"input": "x = -1000000001", "output": "-1000000001"}, {"input": "x = 10000000000", "output": "1"}, {"input": "x = 11000000001", "output": "0"}, {"input": "x = 876543210", "output": "12345678"}, {"input": "x = 2147483640", "output": "463847412"}, {"input": "x = 100100100", "output": "1001001"}, {"input": "x = 100000", "output": "1"}, {"input": "x = 2000000002", "output": "2000000002"}, {"input": "x = -9646324351", "output": "-1534236469"}, {"input": "x = -123456789", "output": "-987654321"}, {"input": "x = 7463847412", "output": "2147483647"}, {"input": "x = -1000000003", "output": "0"}, {"input": "x = -3000000001", "output": "-1000000003"}, {"input": "x = -876543210", "output": "-12345678"}, {"input": "x = -1111111111", "output": "-1111111111"}, {"input": "x = -1001001001", "output": "-1001001001"}, {"input": "x = 9646324351", "output": "1534236469"}, {"input": "x = 1010101010", "output": "101010101"}, {"input": "x = 123456789", "output": "987654321"}, {"input": "x = -10000000000", "output": "-1"}, {"input": "x = -2147483640", "output": "-463847412"}, {"input": "x = -7463847412", "output": "-2147483647"}, {"input": "x = 3000000001", "output": "1000000003"}, {"input": "x = 1000000000", "output": "1"}, {"input": "x = 1000000003", "output": "0"}, {"input": "x = -214748364", "output": "-463847412"}, {"input": "x = 9000000000", "output": "9"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "perfect-squares", "question_id": 279, "tags": ["Breadth-First Search", "Math", "Dynamic Programming"], "signature": "class Solution:\n    def numSquares(self, n: int) -> int:\n        ", "entry_point": "numSquares_279", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def numSquares_279(n: int) -> int:\n    m = int(sqrt(n))\n    f = [[inf] * (n + 1) for _ in range(m + 1)]\n    f[0][0] = 0\n    for i in range(1, m + 1):\n        for j in range(n + 1):\n            f[i][j] = f[i - 1][j]\n            if j >= i * i:\n                f[i][j] = min(f[i][j], f[i][j - i * i] + 1)\n    return f[m][n]", "IO_sample": [{"input": "n = 625", "output": "1"}, {"input": "n = 8", "output": "2"}, {"input": "n = 100", "output": "1"}, {"input": "n = 4", "output": "1"}, {"input": "n = 12", "output": "3"}, {"input": "n = 16", "output": "1"}, {"input": "n = 17", "output": "2"}, {"input": "n = 10000", "output": "1"}, {"input": "n = 9", "output": "1"}, {"input": "n = 9876", "output": "3"}, {"input": "n = 6", "output": "3"}, {"input": "n = 9999", "output": "4"}, {"input": "n = 23", "output": "4"}, {"input": "n = 1", "output": "1"}, {"input": "n = 10", "output": "2"}, {"input": "n = 13", "output": "2"}, {"input": "n = 25", "output": "1"}, {"input": "n = 3", "output": "3"}, {"input": "n = 9801", "output": "1"}, {"input": "n = 156", "output": "4"}, {"input": "n = 2356", "output": "3"}, {"input": "n = 63", "output": "4"}, {"input": "n = 4001", "output": "2"}, {"input": "n = 144", "output": "1"}, {"input": "n = 12345", "output": "3"}, {"input": "n = 8200", "output": "2"}, {"input": "n = 5678", "output": "3"}, {"input": "n = 2345", "output": "3"}, {"input": "n = 1111", "output": "4"}, {"input": "n = 1600", "output": "1"}, {"input": "n = 7500", "output": "3"}, {"input": "n = 50", "output": "2"}, {"input": "n = 3333", "output": "3"}, {"input": "n = 300", "output": "3"}, {"input": "n = 28", "output": "4"}, {"input": "n = 6250", "output": "2"}, {"input": "n = 8402", "output": "2"}, {"input": "n = 3000", "output": "3"}, {"input": "n = 64", "output": "1"}, {"input": "n = 98", "output": "2"}, {"input": "n = 2", "output": "2"}, {"input": "n = 8401", "output": "3"}, {"input": "n = 1024", "output": "1"}, {"input": "n = 38", "output": "3"}, {"input": "n = 7776", "output": "3"}, {"input": "n = 8000", "output": "2"}, {"input": "n = 169", "output": "1"}, {"input": "n = 75", "output": "3"}, {"input": "n = 5000", "output": "2"}, {"input": "n = 9500", "output": "4"}, {"input": "n = 19", "output": "3"}, {"input": "n = 7199", "output": "4"}, {"input": "n = 77", "output": "3"}, {"input": "n = 1999", "output": "4"}, {"input": "n = 5625", "output": "1"}, {"input": "n = 81", "output": "1"}, {"input": "n = 7654", "output": "3"}, {"input": "n = 48", "output": "3"}, {"input": "n = 4321", "output": "2"}, {"input": "n = 7777", "output": "3"}, {"input": "n = 6400", "output": "1"}, {"input": "n = 325", "output": "2"}, {"input": "n = 9000", "output": "2"}, {"input": "n = 4999", "output": "4"}, {"input": "n = 4369", "output": "2"}, {"input": "n = 400", "output": "1"}, {"input": "n = 78", "output": "3"}, {"input": "n = 31", "output": "4"}, {"input": "n = 1234", "output": "2"}, {"input": "n = 3125", "output": "2"}, {"input": "n = 2017", "output": "2"}, {"input": "n = 85", "output": "2"}, {"input": "n = 196", "output": "1"}, {"input": "n = 8999", "output": "4"}, {"input": "n = 84", "output": "3"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "guess-number-higher-or-lower-ii", "question_id": 375, "tags": ["Math", "Dynamic Programming", "Game Theory"], "signature": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        ", "entry_point": "getMoneyAmount_375", "constraints": "1 <= n <= 200", "IO_type": [["n:int"], ["int"]], "code": "def getMoneyAmount_375(n: int) -> int:\n    f = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, 0, -1):\n        for j in range(i + 1, n + 1):\n            f[i][j] = j + f[i][j - 1]\n            for k in range(i, j):\n                f[i][j] = min(f[i][j], max(f[i][k - 1], f[k + 1][j]) + k)\n    return f[1][n]", "IO_sample": [{"input": "n = 100", "output": "400"}, {"input": "n = 15", "output": "30"}, {"input": "n = 200", "output": "952"}, {"input": "n = 2", "output": "1"}, {"input": "n = 1", "output": "0"}, {"input": "n = 10", "output": "16"}, {"input": "n = 5", "output": "6"}, {"input": "n = 150", "output": "692"}, {"input": "n = 3", "output": "2"}, {"input": "n = 130", "output": "585"}, {"input": "n = 125", "output": "560"}, {"input": "n = 12", "output": "21"}, {"input": "n = 110", "output": "460"}, {"input": "n = 50", "output": "172"}, {"input": "n = 60", "output": "214"}, {"input": "n = 155", "output": "718"}, {"input": "n = 30", "output": "79"}, {"input": "n = 40", "output": "119"}, {"input": "n = 4", "output": "4"}, {"input": "n = 80", "output": "295"}, {"input": "n = 75", "output": "274"}, {"input": "n = 140", "output": "635"}, {"input": "n = 18", "output": "42"}, {"input": "n = 120", "output": "529"}, {"input": "n = 160", "output": "743"}, {"input": "n = 199", "output": "946"}, {"input": "n = 180", "output": "843"}, {"input": "n = 90", "output": "345"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "elimination-game", "question_id": 390, "tags": ["Recursion", "Math"], "signature": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        ", "entry_point": "lastRemaining_390", "constraints": "1 <= n <= 10**9", "IO_type": [["n:int"], ["int"]], "code": "def lastRemaining_390(n: int) -> int:\n    (a1, an) = (1, n)\n    (i, step, cnt) = (0, 1, n)\n    while cnt > 1:\n        if i % 2:\n            an -= step\n            if cnt % 2:\n                a1 += step\n        else:\n            a1 += step\n            if cnt % 2:\n                an -= step\n        cnt >>= 1\n        step <<= 1\n        i += 1\n    return a1", "IO_sample": [{"input": "n = 11", "output": "8"}, {"input": "n = 100", "output": "54"}, {"input": "n = 9", "output": "6"}, {"input": "n = 1000000", "output": "481110"}, {"input": "n = 2", "output": "2"}, {"input": "n = 20", "output": "6"}, {"input": "n = 1", "output": "1"}, {"input": "n = 1000000000", "output": "534765398"}, {"input": "n = 1000", "output": "510"}, {"input": "n = 10", "output": "8"}, {"input": "n = 25", "output": "14"}, {"input": "n = 244140", "output": "130558"}, {"input": "n = 15258", "output": "8160"}, {"input": "n = 3", "output": "2"}, {"input": "n = 3814", "output": "2040"}, {"input": "n = 119", "output": "56"}, {"input": "n = 29", "output": "14"}, {"input": "n = 999999999", "output": "534765056"}, {"input": "n = 12345", "output": "5502"}, {"input": "n = 4096", "output": "1366"}, {"input": "n = 976562", "output": "522232"}, {"input": "n = 1953125", "output": "908662"}, {"input": "n = 50", "output": "24"}, {"input": "n = 2047", "output": "1024"}, {"input": "n = 16383", "output": "8192"}, {"input": "n = 5", "output": "2"}, {"input": "n = 10001", "output": "5974"}, {"input": "n = 16384", "output": "5462"}, {"input": "n = 59", "output": "32"}, {"input": "n = 250000000", "output": "133691350"}, {"input": "n = 238", "output": "128"}, {"input": "n = 4", "output": "2"}, {"input": "n = 125000000", "output": "58154326"}, {"input": "n = 10000", "output": "5974"}, {"input": "n = 1001", "output": "510"}, {"input": "n = 15625000", "output": "8355710"}, {"input": "n = 7812500", "output": "3634646"}, {"input": "n = 62500000", "output": "33422838"}, {"input": "n = 122070", "output": "56792"}, {"input": "n = 50000000", "output": "33551830"}, {"input": "n = 128", "output": "86"}, {"input": "n = 1024", "output": "342"}, {"input": "n = 101", "output": "54"}, {"input": "n = 10000000", "output": "6150102"}, {"input": "n = 61035", "output": "32640"}, {"input": "n = 100000", "output": "55286"}, {"input": "n = 2048", "output": "1366"}, {"input": "n = 1048576", "output": "349526"}, {"input": "n = 999", "output": "504"}, {"input": "n = 953", "output": "510"}, {"input": "n = 3906250", "output": "2088928"}, {"input": "n = 8192", "output": "5462"}, {"input": "n = 30517", "output": "14198"}, {"input": "n = 65536", "output": "21846"}, {"input": "n = 5000", "output": "2014"}, {"input": "n = 7629", "output": "3550"}, {"input": "n = 256", "output": "86"}, {"input": "n = 1023", "output": "512"}, {"input": "n = 9999", "output": "5984"}, {"input": "n = 31250000", "output": "14538582"}, {"input": "n = 476", "output": "222"}, {"input": "n = 1000000001", "output": "534765398"}, {"input": "n = 127", "output": "64"}, {"input": "n = 987654321", "output": "534740470"}, {"input": "n = 5000000", "output": "1924950"}, {"input": "n = 500000", "output": "259446"}, {"input": "n = 488281", "output": "227166"}, {"input": "n = 98765", "output": "54750"}, {"input": "n = 500000000", "output": "232617302"}, {"input": "n = 31", "output": "16"}, {"input": "n = 1000001", "output": "481110"}, {"input": "n = 14", "output": "8"}, {"input": "n = 512", "output": "342"}, {"input": "n = 999999", "output": "481152"}, {"input": "n = 123456", "output": "63318"}, {"input": "n = 500", "output": "246"}, {"input": "n = 1907", "output": "888"}, {"input": "n = 7", "output": "4"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "integer-replacement", "question_id": 397, "tags": ["Greedy", "Bit Manipulation", "Memoization", "Dynamic Programming"], "signature": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        ", "entry_point": "integerReplacement_397", "constraints": "1 <= n <= 2**31 - 1", "IO_type": [["n:int"], ["int"]], "code": "def integerReplacement_397(n: int) -> int:\n    ans = 0\n    while n != 1:\n        if n & 1 == 0:\n            n >>= 1\n        elif n != 3 and n & 3 == 3:\n            n += 1\n        else:\n            n -= 1\n        ans += 1\n    return ans", "IO_sample": [{"input": "n = 8", "output": "3"}, {"input": "n = 15", "output": "5"}, {"input": "n = 4", "output": "2"}, {"input": "n = 2147483647", "output": "32"}, {"input": "n = 1", "output": "0"}, {"input": "n = 1000000000", "output": "38"}, {"input": "n = 7", "output": "4"}, {"input": "n = 317", "output": "11"}, {"input": "n = 63", "output": "7"}, {"input": "n = 21", "output": "6"}, {"input": "n = 32767", "output": "16"}, {"input": "n = 50000", "output": "20"}, {"input": "n = 2047", "output": "12"}, {"input": "n = 16383", "output": "15"}, {"input": "n = 5", "output": "3"}, {"input": "n = 123", "output": "9"}, {"input": "n = 134217727", "output": "28"}, {"input": "n = 64", "output": "6"}, {"input": "n = 99", "output": "9"}, {"input": "n = 1073741823", "output": "31"}, {"input": "n = 23", "output": "6"}, {"input": "n = 51", "output": "8"}, {"input": "n = 16777215", "output": "25"}, {"input": "n = 101", "output": "9"}, {"input": "n = 99999999", "output": "32"}, {"input": "n = 2048", "output": "11"}, {"input": "n = 999", "output": "13"}, {"input": "n = 27", "output": "7"}, {"input": "n = 8191", "output": "14"}, {"input": "n = 1023", "output": "11"}, {"input": "n = 19", "output": "6"}, {"input": "n = 65535", "output": "17"}, {"input": "n = 513", "output": "10"}, {"input": "n = 127", "output": "8"}, {"input": "n = 1048575", "output": "21"}, {"input": "n = 31", "output": "6"}, {"input": "n = 1000000", "output": "24"}]}
{"cc_complex": 6, "difficulty": "Hard", "task_id": "largest-palindrome-product", "question_id": 479, "tags": ["Math", "Enumeration"], "signature": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        ", "entry_point": "largestPalindrome_479", "constraints": "1 <= n <= 8", "IO_type": [["n:int"], ["int"]], "code": "def largestPalindrome_479(n: int) -> int:\n    mx = 10 ** n - 1\n    for a in range(mx, mx // 10, -1):\n        b = x = a\n        while b:\n            x = x * 10 + b % 10\n            b //= 10\n        t = mx\n        while t * t >= x:\n            if x % t == 0:\n                return x % 1337\n            t -= 1\n    return 9", "IO_sample": [{"input": "n = 8", "output": "475"}, {"input": "n = 3", "output": "123"}, {"input": "n = 4", "output": "597"}, {"input": "n = 6", "output": "1218"}, {"input": "n = 2", "output": "987"}, {"input": "n = 1", "output": "9"}, {"input": "n = 7", "output": "877"}, {"input": "n = 5", "output": "677"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "beautiful-arrangement", "question_id": 526, "tags": ["Bit Manipulation", "Array", "Dynamic Programming", "Backtracking", "Bitmask"], "signature": "class Solution:\n    def countArrangement(self, n: int) -> int:\n        ", "entry_point": "countArrangement_526", "constraints": "1 <= n <= 15", "IO_type": [["n:int"], ["int"]], "code": "def countArrangement_526(n: int) -> int:\n\n    def dfs(i):\n        nonlocal ans, n\n        if i == n + 1:\n            ans += 1\n            return\n        for j in match[i]:\n            if not vis[j]:\n                vis[j] = True\n                dfs(i + 1)\n                vis[j] = False\n    ans = 0\n    vis = [False] * (n + 1)\n    match = defaultdict(list)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j % i == 0 or i % j == 0:\n                match[i].append(j)\n    dfs(1)\n    return ans", "IO_sample": [{"input": "n = 8", "output": "132"}, {"input": "n = 3", "output": "3"}, {"input": "n = 11", "output": "750"}, {"input": "n = 15", "output": "24679"}, {"input": "n = 4", "output": "8"}, {"input": "n = 12", "output": "4010"}, {"input": "n = 14", "output": "10680"}, {"input": "n = 9", "output": "250"}, {"input": "n = 13", "output": "4237"}, {"input": "n = 6", "output": "36"}, {"input": "n = 2", "output": "2"}, {"input": "n = 1", "output": "1"}, {"input": "n = 7", "output": "41"}, {"input": "n = 10", "output": "700"}, {"input": "n = 5", "output": "10"}]}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "next-greater-element-iii", "question_id": 556, "tags": ["Math", "Two Pointers", "String"], "signature": "class Solution:\n    def nextGreaterElement(self, n: int) -> int:\n        ", "entry_point": "nextGreaterElement_556", "constraints": "1 <= n <= 2**31 - 1", "IO_type": [["n:int"], ["int"]], "code": "def nextGreaterElement_556(n: int) -> int:\n    cs = list(str(n))\n    n = len(cs)\n    (i, j) = (n - 2, n - 1)\n    while i >= 0 and cs[i] >= cs[i + 1]:\n        i -= 1\n    if i < 0:\n        return -1\n    while cs[i] >= cs[j]:\n        j -= 1\n    (cs[i], cs[j]) = (cs[j], cs[i])\n    cs[i + 1:] = cs[i + 1:][::-1]\n    ans = int(''.join(cs))\n    return -1 if ans > 2 ** 31 - 1 else ans", "IO_sample": [{"input": "n = 987654321", "output": "-1"}, {"input": "n = 230241", "output": "230412"}, {"input": "n = 2147483476", "output": "2147483647"}, {"input": "n = 12", "output": "21"}, {"input": "n = 21", "output": "-1"}, {"input": "n = 1234", "output": "1243"}, {"input": "n = 2147483647", "output": "-1"}, {"input": "n = 2147483486", "output": "-1"}, {"input": "n = 534976", "output": "536479"}, {"input": "n = 111", "output": "-1"}, {"input": "n = 1999999999", "output": "-1"}, {"input": "n = 1", "output": "-1"}, {"input": "n = 4321", "output": "-1"}, {"input": "n = 1010101010", "output": "1010101100"}, {"input": "n = 43214321", "output": "43221134"}, {"input": "n = 123456789876543210", "output": "-1"}, {"input": "n = 567898765", "output": "567956788"}, {"input": "n = 2147483646", "output": "-1"}, {"input": "n = 999999999", "output": "-1"}, {"input": "n = 5432109876", "output": "-1"}, {"input": "n = 1234567890123456789", "output": "-1"}, {"input": "n = 321321321", "output": "321322113"}, {"input": "n = 12345678987654321", "output": "-1"}, {"input": "n = 123456789123456789", "output": "-1"}, {"input": "n = 4321098765", "output": "-1"}, {"input": "n = 223344556677889900", "output": "-1"}, {"input": "n = 1225444333111", "output": "-1"}, {"input": "n = 543212345", "output": "543212354"}, {"input": "n = 432143214321", "output": "-1"}, {"input": "n = 111122223333", "output": "-1"}, {"input": "n = 999999998", "output": "-1"}, {"input": "n = 531", "output": "-1"}, {"input": "n = 2233445566778899", "output": "-1"}, {"input": "n = 1098765432", "output": "1203456789"}, {"input": "n = 11111111111111111111", "output": "-1"}, {"input": "n = 5364768910", "output": "-1"}, {"input": "n = 5432109876543210", "output": "-1"}, {"input": "n = 2147483645", "output": "-1"}, {"input": "n = 2100000000", "output": "-1"}, {"input": "n = 450210", "output": "451002"}, {"input": "n = 101010101", "output": "101010110"}, {"input": "n = 2121212121", "output": "2121212211"}, {"input": "n = 11223344556677889900", "output": "-1"}, {"input": "n = 898989898", "output": "898989988"}, {"input": "n = 536421", "output": "541236"}, {"input": "n = 12341234", "output": "12341243"}, {"input": "n = 12344321", "output": "12412334"}, {"input": "n = 333333333", "output": "-1"}, {"input": "n = 9876543210", "output": "-1"}, {"input": "n = 33333333333333333333", "output": "-1"}, {"input": "n = 3456789012", "output": "-1"}, {"input": "n = 3214321", "output": "3221134"}, {"input": "n = 112233445566778899", "output": "-1"}, {"input": "n = 123456789987654321", "output": "-1"}, {"input": "n = 432123456789", "output": "-1"}, {"input": "n = 3333333333", "output": "-1"}, {"input": "n = 1000000000", "output": "-1"}, {"input": "n = 1099999999", "output": "1909999999"}, {"input": "n = 12345678901234567890", "output": "-1"}, {"input": "n = 111111111", "output": "-1"}, {"input": "n = 1234567890", "output": "1234567908"}, {"input": "n = 2222222222", "output": "-1"}, {"input": "n = 43212341", "output": "43212413"}, {"input": "n = 499999999", "output": "949999999"}, {"input": "n = 1121121121", "output": "1121121211"}, {"input": "n = 1221", "output": "2112"}, {"input": "n = 123454321", "output": "123512344"}, {"input": "n = 8999999999999999999999999999999999", "output": "-1"}, {"input": "n = 543210", "output": "-1"}, {"input": "n = 8765432109", "output": "-1"}, {"input": "n = 543210987654321", "output": "-1"}, {"input": "n = 98765", "output": "-1"}, {"input": "n = 999999999999999999", "output": "-1"}, {"input": "n = 123456789", "output": "123456798"}, {"input": "n = 1112111111", "output": "1121111111"}, {"input": "n = 98765432109876543210", "output": "-1"}, {"input": "n = 987654321123456789", "output": "-1"}, {"input": "n = 1111111111", "output": "-1"}, {"input": "n = 54321", "output": "-1"}, {"input": "n = 450340561", "output": "450340615"}]}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "minimum-factorization", "question_id": 625, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def smallestFactorization(self, num: int) -> int:\n        ", "entry_point": "smallestFactorization_625", "constraints": "1 <= num <= 2**31 - 1", "IO_type": [["num:int"], ["int"]], "code": "def smallestFactorization_625(num: int) -> int:\n    if num < 2:\n        return num\n    (ans, mul) = (0, 1)\n    for i in range(9, 1, -1):\n        while num % i == 0:\n            num //= i\n            ans = mul * i + ans\n            mul *= 10\n    return ans if num < 2 and ans <= 2 ** 31 - 1 else 0", "IO_sample": [{"input": "num = 3249", "output": "0"}, {"input": "num = 10", "output": "25"}, {"input": "num = 48", "output": "68"}, {"input": "num = 210", "output": "567"}, {"input": "num = 1000000000", "output": "0"}, {"input": "num = 360", "output": "589"}, {"input": "num = 123456789", "output": "0"}, {"input": "num = 216", "output": "389"}, {"input": "num = 18", "output": "29"}, {"input": "num = 1", "output": "1"}, {"input": "num = 100", "output": "455"}, {"input": "num = 1024", "output": "2888"}, {"input": "num = 2147483647", "output": "0"}, {"input": "num = 72", "output": "89"}, {"input": "num = 999999999", "output": "0"}, {"input": "num = 231", "output": "0"}, {"input": "num = 180", "output": "459"}, {"input": "num = 37", "output": "0"}, {"input": "num = 15", "output": "35"}, {"input": "num = 222222222", "output": "0"}, {"input": "num = 12345678", "output": "0"}, {"input": "num = 512", "output": "888"}, {"input": "num = 111111111", "output": "0"}, {"input": "num = 555555555", "output": "0"}, {"input": "num = 4294967295", "output": "0"}, {"input": "num = 2384185791015625", "output": "0"}, {"input": "num = 888888888", "output": "0"}, {"input": "num = 6789", "output": "0"}, {"input": "num = 444444444", "output": "0"}, {"input": "num = 5184", "output": "8899"}, {"input": "num = 777777777", "output": "0"}, {"input": "num = 82944", "output": "288899"}, {"input": "num = 666666666", "output": "0"}, {"input": "num = 65535", "output": "0"}, {"input": "num = 333333333", "output": "0"}, {"input": "num = 1999999999", "output": "0"}, {"input": "num = 3628800", "output": "45578899"}, {"input": "num = 46656", "output": "88999"}, {"input": "num = 1234567890", "output": "0"}, {"input": "num = 86420", "output": "0"}, {"input": "num = 94143178827", "output": "0"}, {"input": "num = 46189", "output": "0"}, {"input": "num = 987654321", "output": "0"}, {"input": "num = 268435456", "output": "0"}, {"input": "num = 86400000", "output": "0"}, {"input": "num = 1000000007", "output": "0"}, {"input": "num = 55555", "output": "0"}, {"input": "num = 86400", "output": "556889"}, {"input": "num = 99999", "output": "0"}, {"input": "num = 1000000", "output": "55555588"}, {"input": "num = 65536", "output": "288888"}, {"input": "num = 199999999", "output": "0"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "maximum-swap", "question_id": 670, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        ", "entry_point": "maximumSwap_670", "constraints": "0 <= num <= 10**8", "IO_type": [["num:int"], ["int"]], "code": "def maximumSwap_670(num: int) -> int:\n    s = list(str(num))\n    n = len(s)\n    d = list(range(n))\n    for i in range(n - 2, -1, -1):\n        if s[i] <= s[d[i + 1]]:\n            d[i] = d[i + 1]\n    for (i, j) in enumerate(d):\n        if s[i] < s[j]:\n            (s[i], s[j]) = (s[j], s[i])\n            break\n    return int(''.join(s))", "IO_sample": [{"input": "num = 9", "output": "9"}, {"input": "num = 987654321", "output": "987654321"}, {"input": "num = 123456789", "output": "923456781"}, {"input": "num = 12", "output": "21"}, {"input": "num = 21", "output": "21"}, {"input": "num = 0", "output": "0"}, {"input": "num = 98368", "output": "98863"}, {"input": "num = 1099511628", "output": "9091511628"}, {"input": "num = 11111", "output": "11111"}, {"input": "num = 1111", "output": "1111"}, {"input": "num = 9973", "output": "9973"}, {"input": "num = 1099511627776", "output": "9091511627776"}, {"input": "num = 1993", "output": "9913"}, {"input": "num = 100", "output": "100"}, {"input": "num = 2736", "output": "7236"}, {"input": "num = 1099511625", "output": "9091511625"}, {"input": "num = 567894321", "output": "967854321"}, {"input": "num = 654321789", "output": "954321786"}, {"input": "num = 33221100", "output": "33221100"}, {"input": "num = 98765456789", "output": "99765456788"}, {"input": "num = 1000000000", "output": "1000000000"}, {"input": "num = 199983", "output": "999183"}, {"input": "num = 5639953", "output": "9639553"}, {"input": "num = 123321321", "output": "323321121"}, {"input": "num = 9876554321", "output": "9876554321"}, {"input": "num = 12321", "output": "32121"}, {"input": "num = 101010101", "output": "111010100"}, {"input": "num = 900000000", "output": "900000000"}, {"input": "num = 109090909", "output": "909090901"}, {"input": "num = 222222221", "output": "222222221"}, {"input": "num = 9834321", "output": "9843321"}, {"input": "num = 199999", "output": "999991"}, {"input": "num = 98877665544332211", "output": "98877665544332211"}, {"input": "num = 4201", "output": "4210"}, {"input": "num = 111111119", "output": "911111111"}, {"input": "num = 32123", "output": "33122"}, {"input": "num = 583214769", "output": "983214765"}, {"input": "num = 319872654", "output": "913872654"}, {"input": "num = 333333", "output": "333333"}, {"input": "num = 891234567", "output": "981234567"}, {"input": "num = 22773388", "output": "82773382"}, {"input": "num = 111222333", "output": "311222331"}, {"input": "num = 98765", "output": "98765"}, {"input": "num = 1119111", "output": "9111111"}, {"input": "num = 111111112", "output": "211111111"}, {"input": "num = 999999990", "output": "999999990"}, {"input": "num = 2736589", "output": "9736582"}, {"input": "num = 109890", "output": "909810"}, {"input": "num = 432109876", "output": "932104876"}, {"input": "num = 983476521", "output": "987436521"}, {"input": "num = 34521", "output": "54321"}, {"input": "num = 33333333", "output": "33333333"}, {"input": "num = 1098765432", "output": "9018765432"}, {"input": "num = 239187654", "output": "932187654"}, {"input": "num = 987654321987654321", "output": "997654321887654321"}, {"input": "num = 227368", "output": "827362"}, {"input": "num = 1122334455", "output": "5122334451"}, {"input": "num = 999999999", "output": "999999999"}, {"input": "num = 564999", "output": "964995"}, {"input": "num = 1000000", "output": "1000000"}, {"input": "num = 898989898", "output": "998989888"}, {"input": "num = 983210987", "output": "993210887"}, {"input": "num = 98769876", "output": "99768876"}, {"input": "num = 765432198", "output": "965432178"}, {"input": "num = 222222222", "output": "222222222"}, {"input": "num = 199321123", "output": "991321123"}, {"input": "num = 100000000", "output": "100000000"}, {"input": "num = 819293818", "output": "919283818"}, {"input": "num = 9876543210", "output": "9876543210"}, {"input": "num = 1999991", "output": "9999911"}, {"input": "num = 333333333", "output": "333333333"}, {"input": "num = 323232323", "output": "333232322"}, {"input": "num = 53142", "output": "54132"}, {"input": "num = 100100", "output": "110000"}, {"input": "num = 1000", "output": "1000"}, {"input": "num = 100000001", "output": "110000000"}, {"input": "num = 3333333", "output": "3333333"}, {"input": "num = 3456432", "output": "6453432"}, {"input": "num = 543210", "output": "543210"}, {"input": "num = 99999999", "output": "99999999"}, {"input": "num = 54321", "output": "54321"}, {"input": "num = 11234321", "output": "41231321"}, {"input": "num = 333322221111", "output": "333322221111"}, {"input": "num = 999999991", "output": "999999991"}, {"input": "num = 333321", "output": "333321"}, {"input": "num = 112233445566778899", "output": "912233445566778891"}, {"input": "num = 199999999", "output": "999999991"}, {"input": "num = 111122223333", "output": "311122223331"}, {"input": "num = 987654321000", "output": "987654321000"}, {"input": "num = 9834765", "output": "9874365"}, {"input": "num = 6789876", "output": "9786876"}, {"input": "num = 599432187", "output": "995432187"}, {"input": "num = 888888888", "output": "888888888"}, {"input": "num = 1234321", "output": "4231321"}, {"input": "num = 1111111111", "output": "1111111111"}, {"input": "num = 63879456", "output": "93876456"}, {"input": "num = 1928374655", "output": "9128374655"}, {"input": "num = 2333333333", "output": "3333333332"}, {"input": "num = 123321", "output": "323121"}, {"input": "num = 387654321", "output": "837654321"}, {"input": "num = 227362", "output": "722362"}, {"input": "num = 983210", "output": "983210"}, {"input": "num = 67899876", "output": "97896876"}, {"input": "num = 2376", "output": "7326"}, {"input": "num = 1234567890", "output": "9234567810"}, {"input": "num = 2345321", "output": "5342321"}, {"input": "num = 892736", "output": "982736"}, {"input": "num = 983215", "output": "985213"}, {"input": "num = 1234567899", "output": "9234567891"}, {"input": "num = 3339333", "output": "9333333"}, {"input": "num = 88988", "output": "98888"}, {"input": "num = 1234554321", "output": "5234514321"}, {"input": "num = 371698542", "output": "971638542"}, {"input": "num = 98765432100", "output": "98765432100"}, {"input": "num = 19932", "output": "99132"}, {"input": "num = 1000001", "output": "1100000"}, {"input": "num = 9832109876", "output": "9932108876"}, {"input": "num = 987654320", "output": "987654320"}, {"input": "num = 227349", "output": "927342"}]}
{"cc_complex": 8, "difficulty": "Medium", "task_id": "monotone-increasing-digits", "question_id": 738, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        ", "entry_point": "monotoneIncreasingDigits_738", "constraints": "0 <= n <= 10**9", "IO_type": [["n:int"], ["int"]], "code": "def monotoneIncreasingDigits_738(n: int) -> int:\n    s = list(str(n))\n    i = 1\n    while i < len(s) and s[i - 1] <= s[i]:\n        i += 1\n    if i < len(s):\n        while i and s[i - 1] > s[i]:\n            s[i - 1] = str(int(s[i - 1]) - 1)\n            i -= 1\n        i += 1\n        while i < len(s):\n            s[i] = '9'\n            i += 1\n    return int(''.join(s))", "IO_sample": [{"input": "n = 999999999", "output": "999999999"}, {"input": "n = 111", "output": "111"}, {"input": "n = 100", "output": "99"}, {"input": "n = 1000", "output": "999"}, {"input": "n = 222", "output": "222"}, {"input": "n = 333", "output": "333"}, {"input": "n = 33332", "output": "29999"}, {"input": "n = 1001", "output": "999"}, {"input": "n = 101010101", "output": "99999999"}, {"input": "n = 21212", "output": "19999"}, {"input": "n = 0", "output": "0"}, {"input": "n = 9876543210", "output": "8999999999"}, {"input": "n = 999", "output": "999"}, {"input": "n = 4321", "output": "3999"}, {"input": "n = 111111111", "output": "111111111"}, {"input": "n = 332", "output": "299"}, {"input": "n = 987654321", "output": "899999999"}, {"input": "n = 11111", "output": "11111"}, {"input": "n = 101010", "output": "99999"}, {"input": "n = 1234", "output": "1234"}, {"input": "n = 120", "output": "119"}, {"input": "n = 10", "output": "9"}, {"input": "n = 1203", "output": "1199"}, {"input": "n = 567898765", "output": "567889999"}, {"input": "n = 987898789", "output": "899999999"}, {"input": "n = 998877665544332211", "output": "899999999999999999"}, {"input": "n = 1112233445566778899", "output": "1112233445566778899"}, {"input": "n = 22221111", "output": "19999999"}, {"input": "n = 5678987654", "output": "5678899999"}, {"input": "n = 1232123", "output": "1229999"}, {"input": "n = 111000999", "output": "99999999"}, {"input": "n = 233221", "output": "229999"}, {"input": "n = 333333333", "output": "333333333"}, {"input": "n = 123456780", "output": "123456779"}, {"input": "n = 5000", "output": "4999"}, {"input": "n = 1000000000", "output": "999999999"}, {"input": "n = 66778899", "output": "66778899"}, {"input": "n = 1234554321", "output": "1234499999"}, {"input": "n = 199999999", "output": "199999999"}, {"input": "n = 11119999", "output": "11119999"}, {"input": "n = 43210", "output": "39999"}, {"input": "n = 657890", "output": "599999"}, {"input": "n = 1111111111", "output": "1111111111"}, {"input": "n = 100000000", "output": "99999999"}, {"input": "n = 1111000011", "output": "999999999"}, {"input": "n = 199999", "output": "199999"}, {"input": "n = 565656565", "output": "559999999"}, {"input": "n = 33333222", "output": "29999999"}, {"input": "n = 444444444", "output": "444444444"}, {"input": "n = 999999998", "output": "899999999"}, {"input": "n = 2233445566778899", "output": "2233445566778899"}, {"input": "n = 1001001", "output": "999999"}, {"input": "n = 777777777", "output": "777777777"}, {"input": "n = 567891234", "output": "567889999"}, {"input": "n = 221332", "output": "199999"}, {"input": "n = 98787656545434241", "output": "89999999999999999"}, {"input": "n = 555555555", "output": "555555555"}, {"input": "n = 1234321", "output": "1233999"}, {"input": "n = 599", "output": "599"}, {"input": "n = 1010101010", "output": "999999999"}, {"input": "n = 123321", "output": "122999"}, {"input": "n = 888888888", "output": "888888888"}, {"input": "n = 123454321", "output": "123449999"}, {"input": "n = 8765432109", "output": "7999999999"}, {"input": "n = 123456789", "output": "123456789"}, {"input": "n = 9631", "output": "8999"}, {"input": "n = 87654321", "output": "79999999"}, {"input": "n = 1001001001", "output": "999999999"}, {"input": "n = 4444444444", "output": "4444444444"}, {"input": "n = 9988776655", "output": "8999999999"}, {"input": "n = 543212345", "output": "499999999"}, {"input": "n = 100100100", "output": "99999999"}, {"input": "n = 876543210", "output": "799999999"}, {"input": "n = 32123", "output": "29999"}, {"input": "n = 9876554321", "output": "8999999999"}, {"input": "n = 654321234", "output": "599999999"}, {"input": "n = 9876543210987654321", "output": "8999999999999999999"}, {"input": "n = 333222111", "output": "299999999"}, {"input": "n = 44444333", "output": "39999999"}, {"input": "n = 898989898", "output": "889999999"}, {"input": "n = 111000", "output": "99999"}, {"input": "n = 3214321", "output": "2999999"}, {"input": "n = 1122334455", "output": "1122334455"}, {"input": "n = 10998877665544332211", "output": "9999999999999999999"}, {"input": "n = 1234567890", "output": "1234567889"}, {"input": "n = 221122", "output": "199999"}, {"input": "n = 1000000", "output": "999999"}, {"input": "n = 543210987", "output": "499999999"}, {"input": "n = 1099", "output": "999"}, {"input": "n = 111222333444555666777888999", "output": "111222333444555666777888999"}, {"input": "n = 222222222", "output": "222222222"}, {"input": "n = 444333222111", "output": "399999999999"}, {"input": "n = 11112222", "output": "11112222"}, {"input": "n = 1109999999", "output": "999999999"}, {"input": "n = 111111110", "output": "99999999"}, {"input": "n = 654321098765", "output": "599999999999"}, {"input": "n = 1234567899", "output": "1234567899"}, {"input": "n = 345678901", "output": "345678899"}, {"input": "n = 666666666", "output": "666666666"}, {"input": "n = 123000456", "output": "122999999"}, {"input": "n = 111122221111", "output": "111119999999"}, {"input": "n = 3456543", "output": "3455999"}, {"input": "n = 3210987654321", "output": "2999999999999"}, {"input": "n = 221122112", "output": "199999999"}, {"input": "n = 12344321", "output": "12339999"}, {"input": "n = 888887777666655554444333322221111", "output": "799999999999999999999999999999999"}, {"input": "n = 555444555", "output": "499999999"}, {"input": "n = 222333444555", "output": "222333444555"}, {"input": "n = 543210", "output": "499999"}, {"input": "n = 8888777766665555", "output": "7999999999999999"}, {"input": "n = 100100", "output": "99999"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "prime-palindrome", "question_id": 866, "tags": ["Math", "Number Theory"], "signature": "class Solution:\n    def primePalindrome(self, n: int) -> int:\n        ", "entry_point": "primePalindrome_866", "constraints": "1 <= n <= 10**8", "IO_type": [["n:int"], ["int"]], "code": "def primePalindrome_866(n: int) -> int:\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        v = 2\n        while v * v <= x:\n            if x % v == 0:\n                return False\n            v += 1\n        return True\n\n    def reverse(x):\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        return res\n    while 1:\n        if reverse(n) == n and is_prime(n):\n            return n\n        if 10 ** 7 < n < 10 ** 8:\n            n = 10 ** 8\n        n += 1", "IO_sample": [{"input": "n = 101", "output": "101"}, {"input": "n = 8", "output": "11"}, {"input": "n = 10000000", "output": "100030001"}, {"input": "n = 10007", "output": "10301"}, {"input": "n = 999", "output": "10301"}, {"input": "n = 6", "output": "7"}, {"input": "n = 999983", "output": "1003001"}, {"input": "n = 2", "output": "2"}, {"input": "n = 100000000", "output": "100030001"}, {"input": "n = 9989900", "output": "100030001"}, {"input": "n = 100030001", "output": "100030001"}, {"input": "n = 100", "output": "101"}, {"input": "n = 10", "output": "11"}, {"input": "n = 1000", "output": "10301"}, {"input": "n = 20000000", "output": "100030001"}, {"input": "n = 1", "output": "2"}, {"input": "n = 13", "output": "101"}, {"input": "n = 12345678", "output": "100030001"}, {"input": "n = 99999", "output": "1003001"}, {"input": "n = 789789789", "output": "789868987"}, {"input": "n = 9999999", "output": "100030001"}, {"input": "n = 66666666", "output": "100030001"}, {"input": "n = 999999999", "output": "Execution timed out"}, {"input": "n = 80779853381", "output": "Execution timed out"}, {"input": "n = 100000001", "output": "100030001"}, {"input": "n = 12321", "output": "12421"}, {"input": "n = 10111011101", "output": "10111311101"}, {"input": "n = 80000000", "output": "100030001"}, {"input": "n = 8999998", "output": "9002009"}, {"input": "n = 75000000", "output": "100030001"}, {"input": "n = 1003001", "output": "1003001"}, {"input": "n = 899989", "output": "1003001"}, {"input": "n = 999980001", "output": "Execution timed out"}, {"input": "n = 200000000", "output": "Execution timed out"}, {"input": "n = 50000000", "output": "100030001"}, {"input": "n = 100003", "output": "1003001"}, {"input": "n = 98765432", "output": "100030001"}, {"input": "n = 100003300001", "output": "Execution timed out"}, {"input": "n = 99999999", "output": "100030001"}, {"input": "n = 55555555", "output": "100030001"}, {"input": "n = 9999", "output": "10301"}, {"input": "n = 90000000", "output": "100030001"}, {"input": "n = 111111111", "output": "111181111"}, {"input": "n = 987654321", "output": "987757789"}, {"input": "n = 9988999", "output": "9989899"}, {"input": "n = 765432123456789", "output": "Execution timed out"}, {"input": "n = 998899", "output": "1003001"}, {"input": "n = 150000000", "output": "150070051"}, {"input": "n = 500000000", "output": "Execution timed out"}, {"input": "n = 11111111", "output": "100030001"}, {"input": "n = 1000000", "output": "1003001"}, {"input": "n = 999888999", "output": "Execution timed out"}, {"input": "n = 88888888", "output": "100030001"}, {"input": "n = 123456789", "output": "123484321"}, {"input": "n = 989", "output": "10301"}, {"input": "n = 1000001", "output": "1003001"}, {"input": "n = 999999", "output": "1003001"}, {"input": "n = 1234567", "output": "1235321"}, {"input": "n = 100001", "output": "1003001"}, {"input": "n = 807798533", "output": "Execution timed out"}, {"input": "n = 999999989", "output": "Execution timed out"}, {"input": "n = 1000003", "output": "1003001"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "clumsy-factorial", "question_id": 1006, "tags": ["Stack", "Math", "Simulation"], "signature": "class Solution:\n    def clumsy(self, n: int) -> int:\n        ", "entry_point": "clumsy_1006", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def clumsy_1006(n: int) -> int:\n    k = 0\n    stk = [n]\n    for x in range(n - 1, 0, -1):\n        if k == 0:\n            stk.append(stk.pop() * x)\n        elif k == 1:\n            stk.append(int(stk.pop() / x))\n        elif k == 2:\n            stk.append(x)\n        else:\n            stk.append(-x)\n        k = (k + 1) % 4\n    return sum(stk)", "IO_sample": [{"input": "n = 8", "output": "9"}, {"input": "n = 3", "output": "6"}, {"input": "n = 100", "output": "101"}, {"input": "n = 4", "output": "7"}, {"input": "n = 10000", "output": "10001"}, {"input": "n = 9", "output": "11"}, {"input": "n = 5000", "output": "5001"}, {"input": "n = 6", "output": "8"}, {"input": "n = 2", "output": "2"}, {"input": "n = 9999", "output": "9998"}, {"input": "n = 1", "output": "1"}, {"input": "n = 1000", "output": "1001"}, {"input": "n = 7", "output": "6"}, {"input": "n = 10", "output": "12"}, {"input": "n = 5", "output": "7"}, {"input": "n = 12", "output": "13"}, {"input": "n = 21", "output": "23"}, {"input": "n = 2000", "output": "2001"}, {"input": "n = 7500", "output": "7501"}, {"input": "n = 104", "output": "105"}, {"input": "n = 50", "output": "52"}, {"input": "n = 300", "output": "301"}, {"input": "n = 28", "output": "29"}, {"input": "n = 30", "output": "32"}, {"input": "n = 99", "output": "98"}, {"input": "n = 6666", "output": "6668"}, {"input": "n = 17", "output": "19"}, {"input": "n = 999", "output": "998"}, {"input": "n = 18", "output": "20"}, {"input": "n = 20", "output": "21"}, {"input": "n = 24", "output": "25"}, {"input": "n = 7777", "output": "7779"}, {"input": "n = 11", "output": "10"}, {"input": "n = 15", "output": "14"}, {"input": "n = 14", "output": "16"}, {"input": "n = 31", "output": "30"}, {"input": "n = 500", "output": "501"}, {"input": "n = 25", "output": "27"}]}
{"cc_complex": 6, "difficulty": "Easy", "task_id": "count-largest-group", "question_id": 1399, "tags": ["Hash Table", "Math"], "signature": "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        ", "entry_point": "countLargestGroup_1399", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def countLargestGroup_1399(n: int) -> int:\n    cnt = Counter()\n    ans = mx = 0\n    for i in range(1, n + 1):\n        s = 0\n        while i:\n            s += i % 10\n            i //= 10\n        cnt[s] += 1\n        if mx < cnt[s]:\n            mx = cnt[s]\n            ans = 1\n        elif mx == cnt[s]:\n            ans += 1\n    return ans", "IO_sample": [{"input": "n = 200", "output": "2"}, {"input": "n = 10000", "output": "1"}, {"input": "n = 9", "output": "9"}, {"input": "n = 104", "output": "1"}, {"input": "n = 9999", "output": "1"}, {"input": "n = 2", "output": "2"}, {"input": "n = 100", "output": "1"}, {"input": "n = 1000", "output": "2"}, {"input": "n = 13", "output": "4"}, {"input": "n = 25", "output": "6"}, {"input": "n = 4000", "output": "1"}, {"input": "n = 2345", "output": "1"}, {"input": "n = 1111", "output": "1"}, {"input": "n = 7000", "output": "2"}, {"input": "n = 4096", "output": "1"}, {"input": "n = 7500", "output": "1"}, {"input": "n = 4567", "output": "1"}, {"input": "n = 2000", "output": "1"}, {"input": "n = 111", "output": "1"}, {"input": "n = 8888", "output": "1"}, {"input": "n = 300", "output": "1"}, {"input": "n = 333", "output": "2"}, {"input": "n = 3000", "output": "2"}, {"input": "n = 99", "output": "1"}, {"input": "n = 888", "output": "1"}, {"input": "n = 1024", "output": "2"}, {"input": "n = 8192", "output": "1"}, {"input": "n = 999", "output": "2"}, {"input": "n = 5555", "output": "1"}, {"input": "n = 8000", "output": "1"}, {"input": "n = 5000", "output": "2"}, {"input": "n = 6543", "output": "1"}, {"input": "n = 7865", "output": "1"}, {"input": "n = 7777", "output": "1"}, {"input": "n = 2222", "output": "1"}, {"input": "n = 2500", "output": "1"}, {"input": "n = 9000", "output": "2"}, {"input": "n = 4999", "output": "2"}, {"input": "n = 3999", "output": "1"}, {"input": "n = 1234", "output": "1"}, {"input": "n = 6000", "output": "1"}, {"input": "n = 1", "output": "1"}, {"input": "n = 500", "output": "1"}, {"input": "n = 10", "output": "1"}, {"input": "n = 1500", "output": "1"}]}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "max-difference-you-can-get-from-changing-an-integer", "question_id": 1432, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def maxDiff(self, num: int) -> int:\n        ", "entry_point": "maxDiff_1432", "constraints": "1 <= num <= 10**8", "IO_type": [["num:int"], ["int"]], "code": "def maxDiff_1432(num: int) -> int:\n    (a, b) = (str(num), str(num))\n    for c in a:\n        if c != '9':\n            a = a.replace(c, '9')\n            break\n    if b[0] != '1':\n        b = b.replace(b[0], '1')\n    else:\n        for c in b[1:]:\n            if c not in '01':\n                b = b.replace(c, '0')\n                break\n    return int(a) - int(b)", "IO_sample": [{"input": "num = 1001100", "output": "8008800"}, {"input": "num = 9", "output": "8"}, {"input": "num = 98789", "output": "81018"}, {"input": "num = 123456", "output": "820000"}, {"input": "num = 987654321", "output": "810000000"}, {"input": "num = 1000000", "output": "8000000"}, {"input": "num = 1221", "output": "8228"}, {"input": "num = 123456789", "output": "820000000"}, {"input": "num = 1111111", "output": "8888888"}, {"input": "num = 987789", "output": "810018"}, {"input": "num = 1001001", "output": "8008008"}, {"input": "num = 12321", "output": "82028"}, {"input": "num = 555", "output": "888"}, {"input": "num = 9999999", "output": "8888888"}, {"input": "num = 123321", "output": "820028"}, {"input": "num = 99100099", "output": "88800088"}, {"input": "num = 543212345", "output": "800000008"}, {"input": "num = 599599599", "output": "800800800"}, {"input": "num = 100000000", "output": "800000000"}, {"input": "num = 12212212", "output": "82282282"}, {"input": "num = 8877665544332211", "output": "8800000000000000"}, {"input": "num = 109080706", "output": "809000000"}, {"input": "num = 888888888", "output": "888888888"}, {"input": "num = 890123456", "output": "800000000"}, {"input": "num = 543210987", "output": "800000000"}, {"input": "num = 111000111", "output": "888000888"}, {"input": "num = 98765432109876543210", "output": "81000000008100000000"}, {"input": "num = 10000000", "output": "80000000"}, {"input": "num = 90000009", "output": "89999998"}, {"input": "num = 1234321", "output": "8200028"}, {"input": "num = 999111111", "output": "888888888"}, {"input": "num = 110101010", "output": "880808080"}, {"input": "num = 20202020", "output": "80808080"}, {"input": "num = 567890123", "output": "800000000"}, {"input": "num = 5566778899", "output": "8800000000"}, {"input": "num = 909090909", "output": "898989898"}, {"input": "num = 44440000", "output": "88880000"}, {"input": "num = 3330333", "output": "8880888"}, {"input": "num = 10000001", "output": "80000008"}, {"input": "num = 111222333", "output": "888222000"}, {"input": "num = 9876543210", "output": "8100000000"}, {"input": "num = 9191919", "output": "8888888"}, {"input": "num = 98709870987", "output": "81008100810"}, {"input": "num = 334455667788", "output": "880000000000"}, {"input": "num = 122121", "output": "822828"}, {"input": "num = 8998", "output": "8008"}, {"input": "num = 77777777", "output": "88888888"}, {"input": "num = 88888888", "output": "88888888"}, {"input": "num = 19000000", "output": "89000000"}, {"input": "num = 200200200", "output": "800800800"}, {"input": "num = 1919191", "output": "8989898"}, {"input": "num = 918273645", "output": "880000000"}, {"input": "num = 100000001", "output": "800000008"}, {"input": "num = 11001100", "output": "88008800"}, {"input": "num = 59595959", "output": "80808080"}, {"input": "num = 209209209", "output": "800800800"}, {"input": "num = 1100110011", "output": "8800880088"}, {"input": "num = 333222111", "output": "888000000"}, {"input": "num = 999000", "output": "888999"}, {"input": "num = 90000000", "output": "89999999"}, {"input": "num = 1098765432", "output": "8090000000"}, {"input": "num = 101010101", "output": "808080808"}, {"input": "num = 57575757", "output": "80808080"}, {"input": "num = 123123123", "output": "820820820"}, {"input": "num = 777770777", "output": "888880888"}, {"input": "num = 123212321", "output": "820282028"}, {"input": "num = 90009", "output": "89998"}, {"input": "num = 1122334455", "output": "8822000000"}, {"input": "num = 100100100", "output": "800800800"}, {"input": "num = 99999999", "output": "88888888"}, {"input": "num = 100000", "output": "800000"}, {"input": "num = 109090909", "output": "809090909"}, {"input": "num = 999999999", "output": "888888888"}, {"input": "num = 1000100", "output": "8000800"}, {"input": "num = 19191919", "output": "89898989"}, {"input": "num = 202020202", "output": "808080808"}, {"input": "num = 1000001", "output": "8000008"}, {"input": "num = 44444444", "output": "88888888"}, {"input": "num = 8880888", "output": "8880888"}, {"input": "num = 191919191", "output": "898989898"}, {"input": "num = 1230123", "output": "8200820"}]}
{"cc_complex": 6, "difficulty": "Easy", "task_id": "count-square-sum-triples", "question_id": 1925, "tags": ["Math", "Enumeration"], "signature": "class Solution:\n    def countTriples(self, n: int) -> int:\n        ", "entry_point": "countTriples_1925", "constraints": "1 <= n <= 250", "IO_type": [["n:int"], ["int"]], "code": "def countTriples_1925(n: int) -> int:\n    ans = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            x = a * a + b * b\n            c = int(sqrt(x))\n            if c <= n and c * c == x:\n                ans += 1\n    return ans", "IO_sample": [{"input": "n = 250", "output": "330"}, {"input": "n = 5", "output": "2"}, {"input": "n = 15", "output": "8"}, {"input": "n = 200", "output": "254"}, {"input": "n = 20", "output": "12"}, {"input": "n = 100", "output": "104"}, {"input": "n = 50", "output": "40"}, {"input": "n = 1", "output": "0"}, {"input": "n = 10", "output": "4"}, {"input": "n = 25", "output": "16"}, {"input": "n = 150", "output": "178"}, {"input": "n = 80", "output": "78"}, {"input": "n = 230", "output": "302"}, {"input": "n = 125", "output": "142"}, {"input": "n = 75", "output": "74"}, {"input": "n = 240", "output": "314"}, {"input": "n = 199", "output": "250"}, {"input": "n = 120", "output": "132"}, {"input": "n = 225", "output": "296"}, {"input": "n = 249", "output": "324"}, {"input": "n = 190", "output": "236"}, {"input": "n = 175", "output": "214"}, {"input": "n = 180", "output": "218"}]}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "next-greater-numerically-balanced-number", "question_id": 2048, "tags": ["Hash Table", "Math", "Backtracking", "Counting", "Enumeration"], "signature": "class Solution:\n    def nextBeautifulNumber(self, n: int) -> int:\n        ", "entry_point": "nextBeautifulNumber_2048", "constraints": "0 <= n <= 10**6", "IO_type": [["n:int"], ["int"]], "code": "def nextBeautifulNumber_2048(n: int) -> int:\n    for x in count(n + 1):\n        y = x\n        cnt = [0] * 10\n        while y:\n            (y, v) = divmod(y, 10)\n            cnt[v] += 1\n        if all((v == 0 or i == v for (i, v) in enumerate(cnt))):\n            return x", "IO_sample": [{"input": "n = 0", "output": "1"}, {"input": "n = 987654321", "output": "Execution timed out"}, {"input": "n = 122333", "output": "123233"}, {"input": "n = 3000", "output": "3133"}, {"input": "n = 1222", "output": "1333"}, {"input": "n = 55555", "output": "122333"}, {"input": "n = 1234", "output": "1333"}, {"input": "n = 112233", "output": "122333"}, {"input": "n = 122133", "output": "122333"}, {"input": "n = 1234567", "output": "1242444"}, {"input": "n = 111222333", "output": "Execution timed out"}, {"input": "n = 999999", "output": "1224444"}, {"input": "n = 123456", "output": "132233"}, {"input": "n = 1", "output": "22"}, {"input": "n = 1000", "output": "1333"}, {"input": "n = 1224444", "output": "1242444"}, {"input": "n = 987654", "output": "1224444"}, {"input": "n = 122", "output": "212"}, {"input": "n = 122333444", "output": "122666666"}, {"input": "n = 1122233344455555", "output": "Execution timed out"}, {"input": "n = 2233445566", "output": "2233535555"}, {"input": "n = 11223334444", "output": "Execution timed out"}, {"input": "n = 122444", "output": "123233"}, {"input": "n = 12233445566778899", "output": "Execution timed out"}, {"input": "n = 3333333", "output": "3334444"}, {"input": "n = 1112223334444555555", "output": "Execution timed out"}, {"input": "n = 666666", "output": "1224444"}, {"input": "n = 11222233", "output": "12255555"}, {"input": "n = 444444", "output": "515555"}, {"input": "n = 1223334444", "output": "1223343444"}, {"input": "n = 221133444555555", "output": "Execution timed out"}, {"input": "n = 999888777666555444333222111", "output": "Execution timed out"}, {"input": "n = 888777666555444333222111", "output": "Execution timed out"}, {"input": "n = 111122223333444455556666777788889999", "output": "Execution timed out"}, {"input": "n = 100111222", "output": "Execution timed out"}, {"input": "n = 2222222", "output": "2241444"}, {"input": "n = 122333444555666777888999", "output": "Execution timed out"}, {"input": "n = 11223344555", "output": "Execution timed out"}, {"input": "n = 999999111222333", "output": "Execution timed out"}, {"input": "n = 44445555", "output": "51225555"}, {"input": "n = 6665554443332211", "output": "6665554444155666"}, {"input": "n = 1233333", "output": "1242444"}, {"input": "n = 122111333", "output": "122666666"}, {"input": "n = 1111222233334444", "output": "Execution timed out"}, {"input": "n = 22333444", "output": "22515555"}, {"input": "n = 12223334444", "output": "Execution timed out"}, {"input": "n = 123321", "output": "123323"}, {"input": "n = 5555554443332211", "output": "Execution timed out"}, {"input": "n = 98765", "output": "122333"}, {"input": "n = 665544332211", "output": "665551556666"}, {"input": "n = 400000", "output": "422444"}, {"input": "n = 88888888", "output": "Execution timed out"}, {"input": "n = 123456789", "output": "126266666"}, {"input": "n = 122333444555666777888", "output": "Execution timed out"}, {"input": "n = 10111222333", "output": "Execution timed out"}, {"input": "n = 1122333444455555", "output": "Execution timed out"}, {"input": "n = 1223334", "output": "1224444"}, {"input": "n = 5555555", "output": "6166666"}, {"input": "n = 999999999", "output": "Execution timed out"}, {"input": "n = 111222333444555666777", "output": "Execution timed out"}, {"input": "n = 223334444555", "output": "223336166666"}, {"input": "n = 111", "output": "122"}, {"input": "n = 999999999999", "output": "Execution timed out"}, {"input": "n = 7777777", "output": "12255555"}, {"input": "n = 1112233", "output": "1224444"}, {"input": "n = 44444441112223333", "output": "Execution timed out"}, {"input": "n = 122333444555555", "output": "122333445445555"}, {"input": "n = 2233444", "output": "2241444"}, {"input": "n = 1222333", "output": "1224444"}, {"input": "n = 11122233344455566677888", "output": "Execution timed out"}, {"input": "n = 2121212121", "output": "2123334444"}, {"input": "n = 112233444555666777888999", "output": "Execution timed out"}, {"input": "n = 1112223334445555", "output": "Execution timed out"}, {"input": "n = 122444455555", "output": "122444545555"}, {"input": "n = 12233344", "output": "12255555"}, {"input": "n = 122222333333", "output": "Execution timed out"}, {"input": "n = 112233445566", "output": "Execution timed out"}, {"input": "n = 1122334455", "output": "Execution timed out"}, {"input": "n = 666666555444333222111", "output": "666666555444333224155"}, {"input": "n = 1000000", "output": "1224444"}, {"input": "n = 111222333444555666777888999", "output": "Execution timed out"}, {"input": "n = 22222222", "output": "22515555"}, {"input": "n = 777777666555444333222111", "output": "Execution timed out"}, {"input": "n = 77777665544332211", "output": "Execution timed out"}, {"input": "n = 122333444555666", "output": "122333445445555"}, {"input": "n = 1221221", "output": "1224444"}, {"input": "n = 5555544332211", "output": "5555544333144"}, {"input": "n = 1233322", "output": "1242444"}, {"input": "n = 4444", "output": "14444"}, {"input": "n = 122334444", "output": "122666666"}, {"input": "n = 12344321111111111111111111", "output": "Execution timed out"}, {"input": "n = 222333444555", "output": "Execution timed out"}, {"input": "n = 1222233333", "output": "1223334444"}, {"input": "n = 1333331", "output": "1422444"}, {"input": "n = 666666777777", "output": "Execution timed out"}]}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "closest-fair-integer", "question_id": 2417, "tags": ["Math", "Enumeration"], "signature": "class Solution:\n    def closestFair(self, n: int) -> int:\n        ", "entry_point": "closestFair_2417", "constraints": "1 <= n <= 10**9", "IO_type": [["n:int"], ["int"]], "code": "def closestFair_2417(n: int) -> int:\n    a = b = k = 0\n    t = n\n    while t:\n        if t % 10 & 1:\n            a += 1\n        else:\n            b += 1\n        t //= 10\n        k += 1\n    if k & 1:\n        x = 10 ** k\n        y = int('1' * (k >> 1) or '0')\n        return x + y\n    if a == b:\n        return n\n    return closestFair_2417(n + 1)", "IO_sample": [{"input": "n = 100000", "output": "100011"}, {"input": "n = 100", "output": "1001"}, {"input": "n = 2222222", "output": "10000111"}, {"input": "n = 13579", "output": "100011"}, {"input": "n = 999999999", "output": "1000001111"}, {"input": "n = 11", "output": "12"}, {"input": "n = 403", "output": "1001"}, {"input": "n = 111111", "output": "111200"}, {"input": "n = 1234", "output": "1234"}, {"input": "n = 123456789", "output": "1000001111"}, {"input": "n = 2", "output": "10"}, {"input": "n = 999999", "output": "10000111"}, {"input": "n = 123456", "output": "123456"}, {"input": "n = 1", "output": "10"}, {"input": "n = 1000000000", "output": "Error: maximum recursion depth exceeded"}, {"input": "n = 1000", "output": "1001"}, {"input": "n = 10", "output": "10"}, {"input": "n = 222222222", "output": "1000001111"}, {"input": "n = 99999", "output": "100011"}, {"input": "n = 8642013579", "output": "8642013579"}, {"input": "n = 899999999", "output": "1000001111"}, {"input": "n = 22222222", "output": "22223111"}, {"input": "n = 100000001", "output": "1000001111"}, {"input": "n = 86420", "output": "100011"}, {"input": "n = 24680", "output": "100011"}, {"input": "n = 987654", "output": "987654"}, {"input": "n = 99000099", "output": "99000099"}, {"input": "n = 444444444", "output": "1000001111"}, {"input": "n = 10001", "output": "100011"}, {"input": "n = 82468246", "output": "82469111"}, {"input": "n = 135792468", "output": "1000001111"}, {"input": "n = 505050505", "output": "1000001111"}, {"input": "n = 345678901", "output": "1000001111"}, {"input": "n = 1100110011", "output": "1100110012"}, {"input": "n = 50050050", "output": "50050051"}, {"input": "n = 101010101", "output": "1000001111"}, {"input": "n = 2468013579", "output": "2468013579"}, {"input": "n = 12345678", "output": "12345678"}, {"input": "n = 800000000", "output": "1000001111"}, {"input": "n = 10000000", "output": "10000111"}, {"input": "n = 99999999", "output": "1000001111"}, {"input": "n = 50000005", "output": "50000111"}, {"input": "n = 1234567891", "output": "1234567892"}, {"input": "n = 55555555", "output": "55556000"}, {"input": "n = 1111111", "output": "10000111"}, {"input": "n = 864208642", "output": "1000001111"}, {"input": "n = 4321", "output": "4321"}, {"input": "n = 44444444", "output": "44445111"}, {"input": "n = 111111111", "output": "1000001111"}, {"input": "n = 987654321", "output": "1000001111"}, {"input": "n = 888888888", "output": "1000001111"}, {"input": "n = 246801357", "output": "1000001111"}, {"input": "n = 11223344", "output": "11223344"}, {"input": "n = 500000", "output": "500011"}, {"input": "n = 111112222", "output": "1000001111"}, {"input": "n = 543210", "output": "543210"}, {"input": "n = 135791", "output": "135800"}, {"input": "n = 11111111", "output": "11112000"}, {"input": "n = 1000000", "output": "10000111"}, {"input": "n = 1357913579", "output": "Error: maximum recursion depth exceeded"}, {"input": "n = 88888888", "output": "88889111"}, {"input": "n = 1234567", "output": "10000111"}, {"input": "n = 1000001", "output": "10000111"}, {"input": "n = 1357924680", "output": "1357924680"}, {"input": "n = 543210987", "output": "1000001111"}, {"input": "n = 1111111111", "output": "Error: maximum recursion depth exceeded"}, {"input": "n = 555555", "output": "555600"}, {"input": "n = 54321", "output": "100011"}, {"input": "n = 100000000", "output": "1000001111"}, {"input": "n = 222222", "output": "222311"}]}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "smallest-value-after-replacing-with-sum-of-prime-factors", "question_id": 2507, "tags": ["Math", "Number Theory", "Simulation"], "signature": "class Solution:\n    def smallestValue(self, n: int) -> int:\n        ", "entry_point": "smallestValue_2507", "constraints": "2 <= n <= 10**5", "IO_type": [["n:int"], ["int"]], "code": "def smallestValue_2507(n: int) -> int:\n    while 1:\n        (t, s, i) = (n, 0, 2)\n        while i <= n // i:\n            while n % i == 0:\n                n //= i\n                s += i\n            i += 1\n        if n > 1:\n            s += n\n        if s == t:\n            return t\n        n = s", "IO_sample": [{"input": "n = 3", "output": "3"}, {"input": "n = 15", "output": "5"}, {"input": "n = 100", "output": "5"}, {"input": "n = 44", "output": "5"}, {"input": "n = 28", "output": "11"}, {"input": "n = 97", "output": "97"}, {"input": "n = 99999", "output": "31"}, {"input": "n = 729", "output": "5"}, {"input": "n = 12345", "output": "5"}, {"input": "n = 49", "output": "5"}, {"input": "n = 104", "output": "19"}, {"input": "n = 841", "output": "31"}, {"input": "n = 987654", "output": "5"}, {"input": "n = 1009", "output": "1009"}, {"input": "n = 60", "output": "7"}, {"input": "n = 6857", "output": "6857"}, {"input": "n = 72", "output": "7"}, {"input": "n = 13195", "output": "11"}, {"input": "n = 225", "output": "5"}, {"input": "n = 720", "output": "19"}, {"input": "n = 128", "output": "5"}, {"input": "n = 1024", "output": "5"}, {"input": "n = 100000", "output": "7"}, {"input": "n = 789", "output": "11"}, {"input": "n = 2048", "output": "13"}, {"input": "n = 999", "output": "7"}, {"input": "n = 2310", "output": "11"}, {"input": "n = 65536", "output": "7"}, {"input": "n = 169", "output": "5"}, {"input": "n = 256", "output": "5"}, {"input": "n = 77", "output": "5"}, {"input": "n = 81", "output": "7"}, {"input": "n = 104729", "output": "104729"}, {"input": "n = 97531", "output": "67"}, {"input": "n = 99998", "output": "5"}, {"input": "n = 1234", "output": "619"}, {"input": "n = 3125", "output": "7"}, {"input": "n = 8898", "output": "7"}, {"input": "n = 510510", "output": "31"}, {"input": "n = 121", "output": "13"}, {"input": "n = 1234567", "output": "1237"}, {"input": "n = 500", "output": "19"}, {"input": "n = 54321", "output": "5"}, {"input": "n = 600851475143", "output": "13"}, {"input": "n = 84", "output": "5"}]}
{"cc_complex": 8, "difficulty": "Medium", "task_id": "minimum-operations-to-reduce-an-integer-to-0", "question_id": 2571, "tags": ["Greedy", "Bit Manipulation", "Dynamic Programming"], "signature": "class Solution:\n    def minOperations(self, n: int) -> int:\n        ", "entry_point": "minOperations_2571", "constraints": "1 <= n <= 10**5", "IO_type": [["n:int"], ["int"]], "code": "def minOperations_2571(n: int) -> int:\n    ans = cnt = 0\n    while n:\n        if n & 1:\n            cnt += 1\n        elif cnt:\n            ans += 1\n            cnt = 0 if cnt == 1 else 1\n        n >>= 1\n    if cnt == 1:\n        ans += 1\n    elif cnt > 1:\n        ans += 2\n    return ans", "IO_sample": [{"input": "n = 3", "output": "2"}, {"input": "n = 63", "output": "2"}, {"input": "n = 100", "output": "3"}, {"input": "n = 50000", "output": "6"}, {"input": "n = 4", "output": "1"}, {"input": "n = 64", "output": "1"}, {"input": "n = 16", "output": "1"}, {"input": "n = 10000", "output": "4"}, {"input": "n = 2", "output": "1"}, {"input": "n = 1024", "output": "1"}, {"input": "n = 54", "output": "3"}, {"input": "n = 100000", "output": "6"}, {"input": "n = 1048576", "output": "1"}, {"input": "n = 65536", "output": "1"}, {"input": "n = 32", "output": "1"}, {"input": "n = 1023", "output": "2"}, {"input": "n = 39", "output": "3"}, {"input": "n = 65535", "output": "2"}, {"input": "n = 15", "output": "2"}, {"input": "n = 32768", "output": "1"}, {"input": "n = 1048575", "output": "2"}, {"input": "n = 31", "output": "2"}, {"input": "n = 1", "output": "1"}, {"input": "n = 10", "output": "2"}, {"input": "n = 65534", "output": "2"}, {"input": "n = 33333", "output": "6"}, {"input": "n = 99999", "output": "7"}, {"input": "n = 8765", "output": "5"}, {"input": "n = 131071", "output": "2"}, {"input": "n = 12345", "output": "5"}, {"input": "n = 7456", "output": "4"}, {"input": "n = 77777", "output": "6"}, {"input": "n = 67890", "output": "6"}, {"input": "n = 65537", "output": "2"}, {"input": "n = 111111", "output": "6"}, {"input": "n = 32767", "output": "2"}, {"input": "n = 65533", "output": "3"}, {"input": "n = 86420", "output": "7"}, {"input": "n = 19683", "output": "7"}, {"input": "n = 16383", "output": "2"}, {"input": "n = 24680", "output": "5"}, {"input": "n = 16384", "output": "1"}, {"input": "n = 123", "output": "3"}, {"input": "n = 10001", "output": "5"}, {"input": "n = 81920", "output": "2"}, {"input": "n = 1365", "output": "6"}, {"input": "n = 32769", "output": "2"}, {"input": "n = 4095", "output": "2"}, {"input": "n = 8192", "output": "1"}, {"input": "n = 999", "output": "4"}, {"input": "n = 8191", "output": "2"}, {"input": "n = 7890", "output": "5"}, {"input": "n = 11001", "output": "6"}, {"input": "n = 39321", "output": "8"}, {"input": "n = 13579", "output": "7"}, {"input": "n = 98765", "output": "7"}, {"input": "n = 43210", "output": "7"}, {"input": "n = 54321", "output": "7"}, {"input": "n = 531441", "output": "5"}, {"input": "n = 1536", "output": "2"}]}
{"cc_complex": 6, "difficulty": "Easy", "task_id": "sum-multiples", "question_id": 2652, "tags": ["Math"], "signature": "class Solution:\n    def sumOfMultiples(self, n: int) -> int:\n        ", "entry_point": "sumOfMultiples_2652", "constraints": "1 <= n <= 10**3", "IO_type": [["n:int"], ["int"]], "code": "def sumOfMultiples_2652(n: int) -> int:\n    return sum((x for x in range(1, n + 1) if x % 3 == 0 or x % 5 == 0 or x % 7 == 0))", "IO_sample": [{"input": "n = 9", "output": "30"}, {"input": "n = 1", "output": "0"}, {"input": "n = 1000", "output": "272066"}, {"input": "n = 7", "output": "21"}, {"input": "n = 10", "output": "40"}, {"input": "n = 210", "output": "12075"}, {"input": "n = 666", "output": "121023"}, {"input": "n = 315", "output": "27090"}, {"input": "n = 100", "output": "2838"}, {"input": "n = 50", "output": "691"}, {"input": "n = 300", "output": "24321"}, {"input": "n = 333", "output": "30339"}, {"input": "n = 60", "output": "1024"}, {"input": "n = 30", "output": "274"}, {"input": "n = 550", "output": "82614"}, {"input": "n = 103", "output": "2940"}, {"input": "n = 840", "output": "191940"}, {"input": "n = 42", "output": "499"}, {"input": "n = 888", "output": "213532"}, {"input": "n = 101", "output": "2838"}, {"input": "n = 250", "output": "17152"}, {"input": "n = 789", "output": "169111"}, {"input": "n = 630", "output": "108045"}, {"input": "n = 999", "output": "271066"}, {"input": "n = 256", "output": "17659"}, {"input": "n = 20", "output": "119"}, {"input": "n = 150", "output": "6109"}, {"input": "n = 800", "output": "173877"}, {"input": "n = 15", "output": "81"}, {"input": "n = 200", "output": "10845"}, {"input": "n = 512", "output": "70927"}, {"input": "n = 750", "output": "153696"}, {"input": "n = 120", "output": "4071"}, {"input": "n = 499", "output": "67389"}, {"input": "n = 700", "output": "133342"}, {"input": "n = 500", "output": "67889"}, {"input": "n = 420", "output": "48090"}, {"input": "n = 84", "output": "1904"}]}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "the-number-of-ways-to-make-the-sum", "question_id": 3183, "tags": ["Array", "Dynamic Programming"], "signature": "class Solution:\n    def numberOfWays(self, n: int) -> int:\n        ", "entry_point": "numberOfWays_3183", "constraints": "1 <= n <= 10**5", "IO_type": [["n:int"], ["int"]], "code": "def numberOfWays_3183(n: int) -> int:\n    mod = 10 ** 9 + 7\n    coins = [1, 2, 6]\n    f = [0] * (n + 1)\n    f[0] = 1\n    for x in coins:\n        for j in range(x, n + 1):\n            f[j] = (f[j] + f[j - x]) % mod\n    ans = f[n]\n    if n >= 4:\n        ans = (ans + f[n - 4]) % mod\n    if n >= 8:\n        ans = (ans + f[n - 8]) % mod\n    return ans", "IO_sample": [{"input": "n = 3", "output": "2"}, {"input": "n = 100000", "output": "250024994"}, {"input": "n = 100", "output": "1276"}, {"input": "n = 30", "output": "121"}, {"input": "n = 4", "output": "4"}, {"input": "n = 12", "output": "22"}, {"input": "n = 10000", "output": "12502501"}, {"input": "n = 6", "output": "7"}, {"input": "n = 20", "output": "56"}, {"input": "n = 2", "output": "2"}, {"input": "n = 1", "output": "1"}, {"input": "n = 1000", "output": "125251"}, {"input": "n = 10", "output": "16"}, {"input": "n = 5", "output": "4"}, {"input": "n = 50", "output": "326"}, {"input": "n = 99999", "output": "249974994"}, {"input": "n = 45", "output": "254"}, {"input": "n = 105", "output": "1379"}, {"input": "n = 49", "output": "301"}, {"input": "n = 125", "output": "1954"}, {"input": "n = 7", "output": "7"}, {"input": "n = 7500", "output": "7033126"}, {"input": "n = 90000", "output": "12522494"}, {"input": "n = 50000", "output": "312512501"}, {"input": "n = 300", "output": "11326"}, {"input": "n = 123", "output": "1892"}, {"input": "n = 60", "output": "466"}, {"input": "n = 60000", "output": "450015001"}, {"input": "n = 600", "output": "45151"}, {"input": "n = 30000", "output": "112507501"}, {"input": "n = 99", "output": "1226"}, {"input": "n = 501", "output": "31376"}, {"input": "n = 80", "output": "821"}, {"input": "n = 51", "output": "326"}, {"input": "n = 8", "output": "11"}, {"input": "n = 250", "output": "7876"}, {"input": "n = 20000", "output": "50005001"}, {"input": "n = 999", "output": "124751"}, {"input": "n = 79", "output": "781"}, {"input": "n = 35", "output": "154"}, {"input": "n = 5000", "output": "3126251"}, {"input": "n = 75", "output": "704"}, {"input": "n = 40000", "output": "200010001"}, {"input": "n = 77", "output": "742"}, {"input": "n = 150", "output": "2851"}, {"input": "n = 800", "output": "80201"}, {"input": "n = 11", "output": "16"}, {"input": "n = 15", "output": "29"}, {"input": "n = 200", "output": "5051"}, {"input": "n = 400", "output": "20101"}, {"input": "n = 750", "output": "70501"}, {"input": "n = 120", "output": "1831"}, {"input": "n = 500", "output": "31376"}, {"input": "n = 55", "output": "379"}, {"input": "n = 70000", "output": "612517501"}, {"input": "n = 25", "output": "79"}]}
{"cc_complex": 11, "difficulty": "Medium", "task_id": "smallest-value-of-the-rearranged-number", "question_id": 2165, "tags": ["Math", "Sorting"], "signature": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        ", "entry_point": "smallestNumber_2165", "constraints": "-10**15 <= num <= 10**15", "IO_type": [["num:int"], ["int"]], "code": "def smallestNumber_2165(num: int) -> int:\n    neg = num < 0\n    num = abs(num)\n    cnt = [0] * 10\n    while num:\n        cnt[num % 10] += 1\n        num //= 10\n    ans = 0\n    if neg:\n        for i in reversed(range(10)):\n            for _ in range(cnt[i]):\n                ans *= 10\n                ans += i\n        return -ans\n    if cnt[0]:\n        for i in range(1, 10):\n            if cnt[i]:\n                ans = i\n                cnt[i] -= 1\n                break\n    for i in range(10):\n        for _ in range(cnt[i]):\n            ans *= 10\n            ans += i\n    return ans", "IO_sample": [{"input": "num = 2020", "output": "2002"}, {"input": "num = 10", "output": "10"}, {"input": "num = -10000000000", "output": "-10000000000"}, {"input": "num = 10000000000", "output": "10000000000"}, {"input": "num = 10001", "output": "10001"}, {"input": "num = 123456789", "output": "123456789"}, {"input": "num = 9876543210", "output": "1023456789"}, {"input": "num = 310", "output": "103"}, {"input": "num = 1000", "output": "1000"}, {"input": "num = -10001", "output": "-11000"}, {"input": "num = -9876543210", "output": "-9876543210"}, {"input": "num = 1001", "output": "1001"}, {"input": "num = 987654321", "output": "123456789"}, {"input": "num = -100", "output": "-100"}, {"input": "num = 0", "output": "0"}, {"input": "num = -7605", "output": "-7650"}, {"input": "num = -1001", "output": "-1100"}, {"input": "num = -123456789", "output": "-987654321"}, {"input": "num = 100", "output": "100"}, {"input": "num = -12345", "output": "-54321"}, {"input": "num = 54321", "output": "12345"}, {"input": "num = -10", "output": "-10"}, {"input": "num = -900", "output": "-900"}, {"input": "num = 20001002003004005", "output": "10000000000022345"}, {"input": "num = -600500400300201", "output": "-654321000000000"}, {"input": "num = 3000000000000000000", "output": "3000000000000000000"}, {"input": "num = -999999999", "output": "-999999999"}, {"input": "num = 101010101010101", "output": "100000001111111"}, {"input": "num = 505050505050505", "output": "500000005555555"}, {"input": "num = -123456789012345", "output": "-987655443322110"}, {"input": "num = -1230456", "output": "-6543210"}, {"input": "num = 2100000000000000", "output": "1000000000000002"}, {"input": "num = 1000000000", "output": "1000000000"}, {"input": "num = -202020202020202", "output": "-222222220000000"}, {"input": "num = 213004005", "output": "100002345"}, {"input": "num = -999999999999999", "output": "-999999999999999"}, {"input": "num = -987654321012345", "output": "-987655443322110"}, {"input": "num = -543210000", "output": "-543210000"}, {"input": "num = -12000210", "output": "-22110000"}, {"input": "num = -99999999999999", "output": "-99999999999999"}, {"input": "num = 101010101", "output": "100001111"}, {"input": "num = 303030303030303", "output": "300000003333333"}, {"input": "num = 56789", "output": "56789"}, {"input": "num = 1230000000", "output": "1000000023"}, {"input": "num = 100000000000001", "output": "100000000000001"}, {"input": "num = 1234567890987654", "output": "1023445566778899"}, {"input": "num = 111222333444555666777888999", "output": "111222333444555666777888999"}, {"input": "num = 1000100", "output": "1000001"}, {"input": "num = 120030400500600", "output": "100000000023456"}, {"input": "num = 20000000000000", "output": "20000000000000"}, {"input": "num = 1000000000000000", "output": "1000000000000000"}, {"input": "num = -111111111111111", "output": "-111111111111111"}, {"input": "num = -300000000000000", "output": "-300000000000000"}, {"input": "num = 1000000000000001", "output": "1000000000000001"}, {"input": "num = 100000000000000", "output": "100000000000000"}, {"input": "num = 2000000000000000001", "output": "1000000000000000002"}, {"input": "num = 202020202020202", "output": "200000002222222"}, {"input": "num = 1002003004", "output": "1000000234"}, {"input": "num = 1000000001", "output": "1000000001"}, {"input": "num = -123456789098765", "output": "-998877665543210"}, {"input": "num = -200100000000000", "output": "-210000000000000"}, {"input": "num = -111222333", "output": "-333222111"}, {"input": "num = -9999999999999", "output": "-9999999999999"}, {"input": "num = 12003004005", "output": "10000002345"}, {"input": "num = 999999999", "output": "999999999"}, {"input": "num = -50000000000000", "output": "-50000000000000"}, {"input": "num = 1111111111111", "output": "1111111111111"}, {"input": "num = -2000000000000000000", "output": "-2000000000000000000"}, {"input": "num = -2000000000000000001", "output": "-2100000000000000000"}, {"input": "num = -1000000000000000000", "output": "-1000000000000000000"}, {"input": "num = 1010101010", "output": "1000001111"}, {"input": "num = 10000000000000000", "output": "10000000000000000"}, {"input": "num = -111000000", "output": "-111000000"}, {"input": "num = 10000000000000001", "output": "10000000000000001"}, {"input": "num = -1", "output": "-1"}, {"input": "num = -543210987654321", "output": "-987655443322110"}, {"input": "num = 2003005006", "output": "2000000356"}, {"input": "num = 30000123", "output": "10000233"}, {"input": "num = 1000002", "output": "1000002"}, {"input": "num = 999999999999999", "output": "999999999999999"}, {"input": "num = -999888777666", "output": "-999888777666"}, {"input": "num = 100001000010000", "output": "100000000000011"}, {"input": "num = 500000000000000", "output": "500000000000000"}, {"input": "num = -222222222", "output": "-222222222"}, {"input": "num = -1000000000000000001", "output": "-1100000000000000000"}, {"input": "num = -200000000000001", "output": "-210000000000000"}, {"input": "num = 2000000001", "output": "1000000002"}, {"input": "num = -100000000000001", "output": "-110000000000000"}, {"input": "num = 111000222333", "output": "100011222333"}, {"input": "num = -900000000000001", "output": "-910000000000000"}, {"input": "num = 5000000000000000000", "output": "5000000000000000000"}, {"input": "num = 5000000000000000001", "output": "1000000000000000005"}, {"input": "num = -1000000000000000", "output": "-1000000000000000"}, {"input": "num = 111111111111111", "output": "111111111111111"}, {"input": "num = -303030303030303", "output": "-333333330000000"}, {"input": "num = 503020104", "output": "100002345"}, {"input": "num = 900000000000000", "output": "900000000000000"}, {"input": "num = 200000000000001", "output": "100000000000002"}, {"input": "num = -50006007008", "output": "-87650000000"}, {"input": "num = 100020003000", "output": "100000000023"}, {"input": "num = 99999999999999", "output": "99999999999999"}, {"input": "num = 3003003", "output": "3000033"}, {"input": "num = -10000100001000", "output": "-11100000000000"}, {"input": "num = -100000000000000", "output": "-100000000000000"}, {"input": "num = 100000000000000000", "output": "100000000000000000"}, {"input": "num = 1234567890", "output": "1023456789"}, {"input": "num = 10000000000000", "output": "10000000000000"}, {"input": "num = 1000000000000000002", "output": "1000000000000000002"}, {"input": "num = -2100300", "output": "-3210000"}, {"input": "num = 2000000000000000000", "output": "2000000000000000000"}, {"input": "num = 1000000000000000000", "output": "1000000000000000000"}, {"input": "num = 123456789012345", "output": "101223344556789"}, {"input": "num = 123000456", "output": "100023456"}, {"input": "num = -987000000000000", "output": "-987000000000000"}, {"input": "num = 1000000000000000001", "output": "1000000000000000001"}, {"input": "num = -202020202", "output": "-222220000"}, {"input": "num = 2003004005", "output": "2000000345"}, {"input": "num = -1234567890", "output": "-9876543210"}, {"input": "num = -5000000", "output": "-5000000"}, {"input": "num = -56789", "output": "-98765"}, {"input": "num = -1000000000000001", "output": "-1100000000000000"}]}
{"cc_complex": 20, "difficulty": "Hard", "task_id": "number-of-distinct-roll-sequences", "question_id": 2318, "tags": ["Memoization", "Dynamic Programming"], "signature": "class Solution:\n    def distinctSequences(self, n: int) -> int:\n        ", "entry_point": "distinctSequences_2318", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def distinctSequences_2318(n: int) -> int:\n    if n == 1:\n        return 6\n    mod = 10 ** 9 + 7\n    dp = [[[0] * 6 for _ in range(6)] for _ in range(n + 1)]\n    for i in range(6):\n        for j in range(6):\n            if gcd(i + 1, j + 1) == 1 and i != j:\n                dp[2][i][j] = 1\n    for k in range(3, n + 1):\n        for i in range(6):\n            for j in range(6):\n                if gcd(i + 1, j + 1) == 1 and i != j:\n                    for h in range(6):\n                        if gcd(h + 1, i + 1) == 1 and h != i and (h != j):\n                            dp[k][i][j] += dp[k - 1][h][i]\n    ans = 0\n    for i in range(6):\n        for j in range(6):\n            ans += dp[-1][i][j]\n    return ans % mod", "IO_sample": [{"input": "n = 3", "output": "66"}, {"input": "n = 100", "output": "534856607"}, {"input": "n = 4", "output": "184"}, {"input": "n = 10000", "output": "874574246"}, {"input": "n = 2", "output": "22"}, {"input": "n = 1", "output": "6"}, {"input": "n = 1000", "output": "497171723"}, {"input": "n = 10", "output": "93120"}, {"input": "n = 2000", "output": "784558903"}, {"input": "n = 104", "output": "920649565"}, {"input": "n = 5", "output": "516"}, {"input": "n = 20000", "output": "846205927"}, {"input": "n = 8000", "output": "366597434"}, {"input": "n = 5000", "output": "798977852"}, {"input": "n = 9999", "output": "455330915"}, {"input": "n = 20", "output": "996985946"}, {"input": "n = 15", "output": "16706688"}, {"input": "n = 6", "output": "1472"}, {"input": "n = 750", "output": "498714087"}, {"input": "n = 500", "output": "353640467"}, {"input": "n = 7", "output": "4136"}]}
