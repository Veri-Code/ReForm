{"cc_complex": 7, "difficulty": "Medium", "task_id": "reverse-integer", "question_id": 7, "tags": ["Math"], "signature": "class Solution:\n    def reverse(self, x: int) -> int:\n        ", "entry_point": "reverse_7", "constraints": "-2**31 <= x <= 2**31 - 1", "IO_type": [["x:int"], ["int"]], "code": "def reverse_7(x: int) -> int:\n    ans = 0\n    (mi, mx) = (-2 ** 31, 2 ** 31 - 1)\n    while x:\n        if ans < mi // 10 + 1 or ans > mx // 10:\n            return 0\n        y = x % 10\n        if x < 0 and y > 0:\n            y -= 10\n        ans = ans * 10 + y\n        x = (x - y) // 10\n    return ans"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "perfect-squares", "question_id": 279, "tags": ["Breadth-First Search", "Math", "Dynamic Programming"], "signature": "class Solution:\n    def numSquares(self, n: int) -> int:\n        ", "entry_point": "numSquares_279", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def numSquares_279(n: int) -> int:\n    m = int(sqrt(n))\n    f = [[inf] * (n + 1) for _ in range(m + 1)]\n    f[0][0] = 0\n    for i in range(1, m + 1):\n        for j in range(n + 1):\n            f[i][j] = f[i - 1][j]\n            if j >= i * i:\n                f[i][j] = min(f[i][j], f[i][j - i * i] + 1)\n    return f[m][n]"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "guess-number-higher-or-lower-ii", "question_id": 375, "tags": ["Math", "Dynamic Programming", "Game Theory"], "signature": "class Solution:\n    def getMoneyAmount(self, n: int) -> int:\n        ", "entry_point": "getMoneyAmount_375", "constraints": "1 <= n <= 200", "IO_type": [["n:int"], ["int"]], "code": "def getMoneyAmount_375(n: int) -> int:\n    f = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, 0, -1):\n        for j in range(i + 1, n + 1):\n            f[i][j] = j + f[i][j - 1]\n            for k in range(i, j):\n                f[i][j] = min(f[i][j], max(f[i][k - 1], f[k + 1][j]) + k)\n    return f[1][n]"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "elimination-game", "question_id": 390, "tags": ["Recursion", "Math"], "signature": "class Solution:\n    def lastRemaining(self, n: int) -> int:\n        ", "entry_point": "lastRemaining_390", "constraints": "1 <= n <= 10**9", "IO_type": [["n:int"], ["int"]], "code": "def lastRemaining_390(n: int) -> int:\n    (a1, an) = (1, n)\n    (i, step, cnt) = (0, 1, n)\n    while cnt > 1:\n        if i % 2:\n            an -= step\n            if cnt % 2:\n                a1 += step\n        else:\n            a1 += step\n            if cnt % 2:\n                an -= step\n        cnt >>= 1\n        step <<= 1\n        i += 1\n    return a1"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "integer-replacement", "question_id": 397, "tags": ["Greedy", "Bit Manipulation", "Memoization", "Dynamic Programming"], "signature": "class Solution:\n    def integerReplacement(self, n: int) -> int:\n        ", "entry_point": "integerReplacement_397", "constraints": "1 <= n <= 2**31 - 1", "IO_type": [["n:int"], ["int"]], "code": "def integerReplacement_397(n: int) -> int:\n    ans = 0\n    while n != 1:\n        if n & 1 == 0:\n            n >>= 1\n        elif n != 3 and n & 3 == 3:\n            n += 1\n        else:\n            n -= 1\n        ans += 1\n    return ans"}
{"cc_complex": 6, "difficulty": "Hard", "task_id": "largest-palindrome-product", "question_id": 479, "tags": ["Math", "Enumeration"], "signature": "class Solution:\n    def largestPalindrome(self, n: int) -> int:\n        ", "entry_point": "largestPalindrome_479", "constraints": "1 <= n <= 8", "IO_type": [["n:int"], ["int"]], "code": "def largestPalindrome_479(n: int) -> int:\n    mx = 10 ** n - 1\n    for a in range(mx, mx // 10, -1):\n        b = x = a\n        while b:\n            x = x * 10 + b % 10\n            b //= 10\n        t = mx\n        while t * t >= x:\n            if x % t == 0:\n                return x % 1337\n            t -= 1\n    return 9"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "beautiful-arrangement", "question_id": 526, "tags": ["Bit Manipulation", "Array", "Dynamic Programming", "Backtracking", "Bitmask"], "signature": "class Solution:\n    def countArrangement(self, n: int) -> int:\n        ", "entry_point": "countArrangement_526", "constraints": "1 <= n <= 15", "IO_type": [["n:int"], ["int"]], "code": "def countArrangement_526(n: int) -> int:\n\n    def dfs(i):\n        nonlocal ans, n\n        if i == n + 1:\n            ans += 1\n            return\n        for j in match[i]:\n            if not vis[j]:\n                vis[j] = True\n                dfs(i + 1)\n                vis[j] = False\n    ans = 0\n    vis = [False] * (n + 1)\n    match = defaultdict(list)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j % i == 0 or i % j == 0:\n                match[i].append(j)\n    dfs(1)\n    return ans"}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "next-greater-element-iii", "question_id": 556, "tags": ["Math", "Two Pointers", "String"], "signature": "class Solution:\n    def nextGreaterElement(self, n: int) -> int:\n        ", "entry_point": "nextGreaterElement_556", "constraints": "1 <= n <= 2**31 - 1", "IO_type": [["n:int"], ["int"]], "code": "def nextGreaterElement_556(n: int) -> int:\n    cs = list(str(n))\n    n = len(cs)\n    (i, j) = (n - 2, n - 1)\n    while i >= 0 and cs[i] >= cs[i + 1]:\n        i -= 1\n    if i < 0:\n        return -1\n    while cs[i] >= cs[j]:\n        j -= 1\n    (cs[i], cs[j]) = (cs[j], cs[i])\n    cs[i + 1:] = cs[i + 1:][::-1]\n    ans = int(''.join(cs))\n    return -1 if ans > 2 ** 31 - 1 else ans"}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "minimum-factorization", "question_id": 625, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def smallestFactorization(self, num: int) -> int:\n        ", "entry_point": "smallestFactorization_625", "constraints": "1 <= num <= 2**31 - 1", "IO_type": [["num:int"], ["int"]], "code": "def smallestFactorization_625(num: int) -> int:\n    if num < 2:\n        return num\n    (ans, mul) = (0, 1)\n    for i in range(9, 1, -1):\n        while num % i == 0:\n            num //= i\n            ans = mul * i + ans\n            mul *= 10\n    return ans if num < 2 and ans <= 2 ** 31 - 1 else 0"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "maximum-swap", "question_id": 670, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def maximumSwap(self, num: int) -> int:\n        ", "entry_point": "maximumSwap_670", "constraints": "0 <= num <= 10**8", "IO_type": [["num:int"], ["int"]], "code": "def maximumSwap_670(num: int) -> int:\n    s = list(str(num))\n    n = len(s)\n    d = list(range(n))\n    for i in range(n - 2, -1, -1):\n        if s[i] <= s[d[i + 1]]:\n            d[i] = d[i + 1]\n    for (i, j) in enumerate(d):\n        if s[i] < s[j]:\n            (s[i], s[j]) = (s[j], s[i])\n            break\n    return int(''.join(s))"}
{"cc_complex": 8, "difficulty": "Medium", "task_id": "monotone-increasing-digits", "question_id": 738, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def monotoneIncreasingDigits(self, n: int) -> int:\n        ", "entry_point": "monotoneIncreasingDigits_738", "constraints": "0 <= n <= 10**9", "IO_type": [["n:int"], ["int"]], "code": "def monotoneIncreasingDigits_738(n: int) -> int:\n    s = list(str(n))\n    i = 1\n    while i < len(s) and s[i - 1] <= s[i]:\n        i += 1\n    if i < len(s):\n        while i and s[i - 1] > s[i]:\n            s[i - 1] = str(int(s[i - 1]) - 1)\n            i -= 1\n        i += 1\n        while i < len(s):\n            s[i] = '9'\n            i += 1\n    return int(''.join(s))"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "prime-palindrome", "question_id": 866, "tags": ["Math", "Number Theory"], "signature": "class Solution:\n    def primePalindrome(self, n: int) -> int:\n        ", "entry_point": "primePalindrome_866", "constraints": "1 <= n <= 10**8", "IO_type": [["n:int"], ["int"]], "code": "def primePalindrome_866(n: int) -> int:\n\n    def is_prime(x):\n        if x < 2:\n            return False\n        v = 2\n        while v * v <= x:\n            if x % v == 0:\n                return False\n            v += 1\n        return True\n\n    def reverse(x):\n        res = 0\n        while x:\n            res = res * 10 + x % 10\n            x //= 10\n        return res\n    while 1:\n        if reverse(n) == n and is_prime(n):\n            return n\n        if 10 ** 7 < n < 10 ** 8:\n            n = 10 ** 8\n        n += 1"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "clumsy-factorial", "question_id": 1006, "tags": ["Stack", "Math", "Simulation"], "signature": "class Solution:\n    def clumsy(self, n: int) -> int:\n        ", "entry_point": "clumsy_1006", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def clumsy_1006(n: int) -> int:\n    k = 0\n    stk = [n]\n    for x in range(n - 1, 0, -1):\n        if k == 0:\n            stk.append(stk.pop() * x)\n        elif k == 1:\n            stk.append(int(stk.pop() / x))\n        elif k == 2:\n            stk.append(x)\n        else:\n            stk.append(-x)\n        k = (k + 1) % 4\n    return sum(stk)"}
{"cc_complex": 6, "difficulty": "Easy", "task_id": "count-largest-group", "question_id": 1399, "tags": ["Hash Table", "Math"], "signature": "class Solution:\n    def countLargestGroup(self, n: int) -> int:\n        ", "entry_point": "countLargestGroup_1399", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def countLargestGroup_1399(n: int) -> int:\n    cnt = Counter()\n    ans = mx = 0\n    for i in range(1, n + 1):\n        s = 0\n        while i:\n            s += i % 10\n            i //= 10\n        cnt[s] += 1\n        if mx < cnt[s]:\n            mx = cnt[s]\n            ans = 1\n        elif mx == cnt[s]:\n            ans += 1\n    return ans"}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "max-difference-you-can-get-from-changing-an-integer", "question_id": 1432, "tags": ["Greedy", "Math"], "signature": "class Solution:\n    def maxDiff(self, num: int) -> int:\n        ", "entry_point": "maxDiff_1432", "constraints": "1 <= num <= 10**8", "IO_type": [["num:int"], ["int"]], "code": "def maxDiff_1432(num: int) -> int:\n    (a, b) = (str(num), str(num))\n    for c in a:\n        if c != '9':\n            a = a.replace(c, '9')\n            break\n    if b[0] != '1':\n        b = b.replace(b[0], '1')\n    else:\n        for c in b[1:]:\n            if c not in '01':\n                b = b.replace(c, '0')\n                break\n    return int(a) - int(b)"}
{"cc_complex": 6, "difficulty": "Easy", "task_id": "count-square-sum-triples", "question_id": 1925, "tags": ["Math", "Enumeration"], "signature": "class Solution:\n    def countTriples(self, n: int) -> int:\n        ", "entry_point": "countTriples_1925", "constraints": "1 <= n <= 250", "IO_type": [["n:int"], ["int"]], "code": "def countTriples_1925(n: int) -> int:\n    ans = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            x = a * a + b * b\n            c = int(sqrt(x))\n            if c <= n and c * c == x:\n                ans += 1\n    return ans"}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "next-greater-numerically-balanced-number", "question_id": 2048, "tags": ["Hash Table", "Math", "Backtracking", "Counting", "Enumeration"], "signature": "class Solution:\n    def nextBeautifulNumber(self, n: int) -> int:\n        ", "entry_point": "nextBeautifulNumber_2048", "constraints": "0 <= n <= 10**6", "IO_type": [["n:int"], ["int"]], "code": "def nextBeautifulNumber_2048(n: int) -> int:\n    for x in count(n + 1):\n        y = x\n        cnt = [0] * 10\n        while y:\n            (y, v) = divmod(y, 10)\n            cnt[v] += 1\n        if all((v == 0 or i == v for (i, v) in enumerate(cnt))):\n            return x"}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "closest-fair-integer", "question_id": 2417, "tags": ["Math", "Enumeration"], "signature": "class Solution:\n    def closestFair(self, n: int) -> int:\n        ", "entry_point": "closestFair_2417", "constraints": "1 <= n <= 10**9", "IO_type": [["n:int"], ["int"]], "code": "def closestFair_2417(n: int) -> int:\n    a = b = k = 0\n    t = n\n    while t:\n        if t % 10 & 1:\n            a += 1\n        else:\n            b += 1\n        t //= 10\n        k += 1\n    if k & 1:\n        x = 10 ** k\n        y = int('1' * (k >> 1) or '0')\n        return x + y\n    if a == b:\n        return n\n    return closestFair_2417(n + 1)"}
{"cc_complex": 7, "difficulty": "Medium", "task_id": "smallest-value-after-replacing-with-sum-of-prime-factors", "question_id": 2507, "tags": ["Math", "Number Theory", "Simulation"], "signature": "class Solution:\n    def smallestValue(self, n: int) -> int:\n        ", "entry_point": "smallestValue_2507", "constraints": "2 <= n <= 10**5", "IO_type": [["n:int"], ["int"]], "code": "def smallestValue_2507(n: int) -> int:\n    while 1:\n        (t, s, i) = (n, 0, 2)\n        while i <= n // i:\n            while n % i == 0:\n                n //= i\n                s += i\n            i += 1\n        if n > 1:\n            s += n\n        if s == t:\n            return t\n        n = s"}
{"cc_complex": 8, "difficulty": "Medium", "task_id": "minimum-operations-to-reduce-an-integer-to-0", "question_id": 2571, "tags": ["Greedy", "Bit Manipulation", "Dynamic Programming"], "signature": "class Solution:\n    def minOperations(self, n: int) -> int:\n        ", "entry_point": "minOperations_2571", "constraints": "1 <= n <= 10**5", "IO_type": [["n:int"], ["int"]], "code": "def minOperations_2571(n: int) -> int:\n    ans = cnt = 0\n    while n:\n        if n & 1:\n            cnt += 1\n        elif cnt:\n            ans += 1\n            cnt = 0 if cnt == 1 else 1\n        n >>= 1\n    if cnt == 1:\n        ans += 1\n    elif cnt > 1:\n        ans += 2\n    return ans"}
{"cc_complex": 6, "difficulty": "Easy", "task_id": "sum-multiples", "question_id": 2652, "tags": ["Math"], "signature": "class Solution:\n    def sumOfMultiples(self, n: int) -> int:\n        ", "entry_point": "sumOfMultiples_2652", "constraints": "1 <= n <= 10**3", "IO_type": [["n:int"], ["int"]], "code": "def sumOfMultiples_2652(n: int) -> int:\n    return sum((x for x in range(1, n + 1) if x % 3 == 0 or x % 5 == 0 or x % 7 == 0))"}
{"cc_complex": 6, "difficulty": "Medium", "task_id": "the-number-of-ways-to-make-the-sum", "question_id": 3183, "tags": ["Array", "Dynamic Programming"], "signature": "class Solution:\n    def numberOfWays(self, n: int) -> int:\n        ", "entry_point": "numberOfWays_3183", "constraints": "1 <= n <= 10**5", "IO_type": [["n:int"], ["int"]], "code": "def numberOfWays_3183(n: int) -> int:\n    mod = 10 ** 9 + 7\n    coins = [1, 2, 6]\n    f = [0] * (n + 1)\n    f[0] = 1\n    for x in coins:\n        for j in range(x, n + 1):\n            f[j] = (f[j] + f[j - x]) % mod\n    ans = f[n]\n    if n >= 4:\n        ans = (ans + f[n - 4]) % mod\n    if n >= 8:\n        ans = (ans + f[n - 8]) % mod\n    return ans"}
{"cc_complex": 11, "difficulty": "Medium", "task_id": "smallest-value-of-the-rearranged-number", "question_id": 2165, "tags": ["Math", "Sorting"], "signature": "class Solution:\n    def smallestNumber(self, num: int) -> int:\n        ", "entry_point": "smallestNumber_2165", "constraints": "-10**15 <= num <= 10**15", "IO_type": [["num:int"], ["int"]], "code": "def smallestNumber_2165(num: int) -> int:\n    neg = num < 0\n    num = abs(num)\n    cnt = [0] * 10\n    while num:\n        cnt[num % 10] += 1\n        num //= 10\n    ans = 0\n    if neg:\n        for i in reversed(range(10)):\n            for _ in range(cnt[i]):\n                ans *= 10\n                ans += i\n        return -ans\n    if cnt[0]:\n        for i in range(1, 10):\n            if cnt[i]:\n                ans = i\n                cnt[i] -= 1\n                break\n    for i in range(10):\n        for _ in range(cnt[i]):\n            ans *= 10\n            ans += i\n    return ans"}
{"cc_complex": 20, "difficulty": "Hard", "task_id": "number-of-distinct-roll-sequences", "question_id": 2318, "tags": ["Memoization", "Dynamic Programming"], "signature": "class Solution:\n    def distinctSequences(self, n: int) -> int:\n        ", "entry_point": "distinctSequences_2318", "constraints": "1 <= n <= 10**4", "IO_type": [["n:int"], ["int"]], "code": "def distinctSequences_2318(n: int) -> int:\n    if n == 1:\n        return 6\n    mod = 10 ** 9 + 7\n    dp = [[[0] * 6 for _ in range(6)] for _ in range(n + 1)]\n    for i in range(6):\n        for j in range(6):\n            if gcd(i + 1, j + 1) == 1 and i != j:\n                dp[2][i][j] = 1\n    for k in range(3, n + 1):\n        for i in range(6):\n            for j in range(6):\n                if gcd(i + 1, j + 1) == 1 and i != j:\n                    for h in range(6):\n                        if gcd(h + 1, i + 1) == 1 and h != i and (h != j):\n                            dp[k][i][j] += dp[k - 1][h][i]\n    ans = 0\n    for i in range(6):\n        for j in range(6):\n            ans += dp[-1][i][j]\n    return ans % mod"}
